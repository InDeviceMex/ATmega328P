
ATmega328P_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00000f36  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006bf  00800306  00800306  000011d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c1d  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000133e  00000000  00000000  000051b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a9d  00000000  00000000  000064f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d58  00000000  00000000  00008f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016cf  00000000  00000000  00009ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057b1  00000000  00000000  0000b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_1>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_9>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  54:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__vector_21>
  58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  7c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  80:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  84:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  88:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  8c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  90:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  94:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  98:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  9c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  a0:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  a4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  a8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  ac:	47 03       	mulsu	r20, r23
  ae:	2d 03       	fmul	r18, r21
  b0:	11 03       	mulsu	r17, r17
  b2:	f9 02       	muls	r31, r25
  b4:	7b 03       	fmul	r23, r19
  b6:	6a 03       	fmul	r22, r18
  b8:	09 03       	fmul	r16, r17
  ba:	7b 03       	fmul	r23, r19
  bc:	7b 03       	fmul	r23, r19
  be:	7b 03       	fmul	r23, r19
  c0:	7b 03       	fmul	r23, r19
  c2:	7b 03       	fmul	r23, r19
  c4:	7b 03       	fmul	r23, r19
  c6:	7b 03       	fmul	r23, r19
  c8:	7b 03       	fmul	r23, r19
  ca:	7b 03       	fmul	r23, r19
  cc:	7b 03       	fmul	r23, r19
  ce:	7b 03       	fmul	r23, r19
  d0:	7b 03       	fmul	r23, r19
  d2:	7b 03       	fmul	r23, r19
  d4:	9a 03       	fmulsu	r17, r18
  d6:	3f 04       	cpc	r3, r15
  d8:	50 04       	cpc	r5, r0
  da:	64 04       	cpc	r6, r4
  dc:	78 04       	cpc	r7, r8
  de:	38 04       	cpc	r3, r8
  e0:	46 04       	cpc	r4, r6
  e2:	5a 04       	cpc	r5, r10
  e4:	6e 04       	cpc	r6, r14

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	da e0       	ldi	r29, 0x0A	; 10
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	13 e0       	ldi	r17, 0x03	; 3
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	e6 e3       	ldi	r30, 0x36	; 54
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	a6 30       	cpi	r26, 0x06	; 6
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
 108:	29 e0       	ldi	r18, 0x09	; 9
 10a:	a6 e0       	ldi	r26, 0x06	; 6
 10c:	b3 e0       	ldi	r27, 0x03	; 3
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	a5 3c       	cpi	r26, 0xC5	; 197
 114:	b2 07       	cpc	r27, r18
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 11c:	0c 94 99 07 	jmp	0xf32	; 0xf32 <_exit>

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <CONV__u8UIntToString>:
    return s64NumberReg;

}

uint8_t CONV__u8UIntToString(uint64_t u64Number, char* pcConv)
{
 124:	6f 92       	push	r6
 126:	7f 92       	push	r7
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	a2 97       	sbiw	r28, 0x22	; 34
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	38 01       	movw	r6, r16
    volatile char 		pcConvTemp[INT2STRINGMAX]={0}; //longitud maxima de long 12 digitos con signo
 152:	8e 01       	movw	r16, r28
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	a5 e1       	ldi	r26, 0x15	; 21
 15a:	f8 01       	movw	r30, r16
 15c:	11 92       	st	Z+, r1
 15e:	aa 95       	dec	r26
 160:	e9 f7       	brne	.-6      	; 0x15c <CONV__u8UIntToString+0x38>
    volatile char 		*pcPointerActual = &pcConvTemp[INT2STRINGMAX - 1]; //empezamos llenando desde la ultima posicion
    volatile int32_t 	s32Num=0;
 162:	1e 8a       	std	Y+22, r1	; 0x16
 164:	1f 8a       	std	Y+23, r1	; 0x17
 166:	18 8e       	std	Y+24, r1	; 0x18
 168:	19 8e       	std	Y+25, r1	; 0x19
    volatile int8_t 		s8I=0;
 16a:	1a 8e       	std	Y+26, r1	; 0x1a
    volatile uint64_t 	u64NumberReg = u64Number;//paso el s32Numero a un registro para aumentar rendimiento
 16c:	2b 8f       	std	Y+27, r18	; 0x1b
 16e:	3c 8f       	std	Y+28, r19	; 0x1c
 170:	4d 8f       	std	Y+29, r20	; 0x1d
 172:	5e 8f       	std	Y+30, r21	; 0x1e
 174:	6f 8f       	std	Y+31, r22	; 0x1f
 176:	78 a3       	std	Y+32, r23	; 0x20
 178:	89 a3       	std	Y+33, r24	; 0x21
 17a:	9a a3       	std	Y+34, r25	; 0x22

    *pcPointerActual = 0; //guarda el fin de cadena en la ultima posicion
 17c:	1d 8a       	std	Y+21, r1	; 0x15
}

uint8_t CONV__u8UIntToString(uint64_t u64Number, char* pcConv)
{
    volatile char 		pcConvTemp[INT2STRINGMAX]={0}; //longitud maxima de long 12 digitos con signo
    volatile char 		*pcPointerActual = &pcConvTemp[INT2STRINGMAX - 1]; //empezamos llenando desde la ultima posicion
 17e:	4e 01       	movw	r8, r28
 180:	f5 e1       	ldi	r31, 0x15	; 21
 182:	8f 0e       	add	r8, r31
 184:	91 1c       	adc	r9, r1
    volatile uint64_t 	u64NumberReg = u64Number;//paso el s32Numero a un registro para aumentar rendimiento

    *pcPointerActual = 0; //guarda el fin de cadena en la ultima posicion
    do {
        pcPointerActual--;//se decrementa la posicion donse guardara el valor
        s32Num=(uint64_t)u64NumberReg % (uint64_t)10ul; //obtiene el digito de menor peso
 186:	2b 8d       	ldd	r18, Y+27	; 0x1b
 188:	3c 8d       	ldd	r19, Y+28	; 0x1c
 18a:	4d 8d       	ldd	r20, Y+29	; 0x1d
 18c:	5e 8d       	ldd	r21, Y+30	; 0x1e
 18e:	6f 8d       	ldd	r22, Y+31	; 0x1f
 190:	78 a1       	ldd	r23, Y+32	; 0x20
 192:	89 a1       	ldd	r24, Y+33	; 0x21
 194:	9a a1       	ldd	r25, Y+34	; 0x22
 196:	0f 2e       	mov	r0, r31
 198:	fa e0       	ldi	r31, 0x0A	; 10
 19a:	af 2e       	mov	r10, r31
 19c:	f0 2d       	mov	r31, r0
 19e:	b1 2c       	mov	r11, r1
 1a0:	c1 2c       	mov	r12, r1
 1a2:	d1 2c       	mov	r13, r1
 1a4:	e1 2c       	mov	r14, r1
 1a6:	f1 2c       	mov	r15, r1
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__umoddi3>
 1b0:	82 2f       	mov	r24, r18
 1b2:	93 2f       	mov	r25, r19
 1b4:	a4 2f       	mov	r26, r20
 1b6:	b5 2f       	mov	r27, r21
 1b8:	8e 8b       	std	Y+22, r24	; 0x16
 1ba:	9f 8b       	std	Y+23, r25	; 0x17
 1bc:	a8 8f       	std	Y+24, r26	; 0x18
 1be:	b9 8f       	std	Y+25, r27	; 0x19
        *pcPointerActual = (uint8_t)s32Num  + '0'; //pcConvierte el valor en caracter
 1c0:	8e 89       	ldd	r24, Y+22	; 0x16
 1c2:	9f 89       	ldd	r25, Y+23	; 0x17
 1c4:	a8 8d       	ldd	r26, Y+24	; 0x18
 1c6:	b9 8d       	ldd	r27, Y+25	; 0x19
 1c8:	80 5d       	subi	r24, 0xD0	; 208
 1ca:	f4 01       	movw	r30, r8
 1cc:	82 93       	st	-Z, r24
 1ce:	4f 01       	movw	r8, r30
    }  while((u64NumberReg /= (uint64_t)10ul)); //mientras exista un digito sigue el ciclo
 1d0:	2b 8d       	ldd	r18, Y+27	; 0x1b
 1d2:	3c 8d       	ldd	r19, Y+28	; 0x1c
 1d4:	4d 8d       	ldd	r20, Y+29	; 0x1d
 1d6:	5e 8d       	ldd	r21, Y+30	; 0x1e
 1d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
 1da:	78 a1       	ldd	r23, Y+32	; 0x20
 1dc:	89 a1       	ldd	r24, Y+33	; 0x21
 1de:	9a a1       	ldd	r25, Y+34	; 0x22
 1e0:	0e 94 30 07 	call	0xe60	; 0xe60 <__udivdi3>
 1e4:	2b 8f       	std	Y+27, r18	; 0x1b
 1e6:	3c 8f       	std	Y+28, r19	; 0x1c
 1e8:	4d 8f       	std	Y+29, r20	; 0x1d
 1ea:	5e 8f       	std	Y+30, r21	; 0x1e
 1ec:	6f 8f       	std	Y+31, r22	; 0x1f
 1ee:	78 a3       	std	Y+32, r23	; 0x20
 1f0:	89 a3       	std	Y+33, r24	; 0x21
 1f2:	9a a3       	std	Y+34, r25	; 0x22
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__cmpdi2_s8>
 1fa:	29 f6       	brne	.-118    	; 0x186 <CONV__u8UIntToString+0x62>

    u64NumberReg=pcConvTemp+INT2STRINGMAX-1-pcPointerActual;//realiza la resta de cuantos caracteres se utilizaron
 1fc:	9e 01       	movw	r18, r28
 1fe:	2b 5e       	subi	r18, 0xEB	; 235
 200:	3f 4f       	sbci	r19, 0xFF	; 255
 202:	28 19       	sub	r18, r8
 204:	39 09       	sbc	r19, r9
 206:	83 2f       	mov	r24, r19
 208:	88 0f       	add	r24, r24
 20a:	88 0b       	sbc	r24, r24
 20c:	2b 8f       	std	Y+27, r18	; 0x1b
 20e:	3c 8f       	std	Y+28, r19	; 0x1c
 210:	8d 8f       	std	Y+29, r24	; 0x1d
 212:	8e 8f       	std	Y+30, r24	; 0x1e
 214:	8f 8f       	std	Y+31, r24	; 0x1f
 216:	88 a3       	std	Y+32, r24	; 0x20
 218:	89 a3       	std	Y+33, r24	; 0x21
 21a:	8a a3       	std	Y+34, r24	; 0x22
    for (s8I = (int8_t)u64NumberReg; s8I>=0; s8I--) //hace un ciclo burbuja optimizado
 21c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 21e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 220:	9d 8d       	ldd	r25, Y+29	; 0x1d
 222:	9e 8d       	ldd	r25, Y+30	; 0x1e
 224:	9f 8d       	ldd	r25, Y+31	; 0x1f
 226:	98 a1       	ldd	r25, Y+32	; 0x20
 228:	99 a1       	ldd	r25, Y+33	; 0x21
 22a:	9a a1       	ldd	r25, Y+34	; 0x22
 22c:	8a 8f       	std	Y+26, r24	; 0x1a
 22e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 230:	88 23       	and	r24, r24
 232:	84 f0       	brlt	.+32     	; 0x254 <CONV__u8UIntToString+0x130>
    {
        ((char *)pcConv)[(uint8_t)s8I] = ((char *)pcPointerActual)[(uint8_t)s8I];
 234:	9a 8d       	ldd	r25, Y+26	; 0x1a
 236:	8a 8d       	ldd	r24, Y+26	; 0x1a
 238:	f3 01       	movw	r30, r6
 23a:	e9 0f       	add	r30, r25
 23c:	f1 1d       	adc	r31, r1
 23e:	d4 01       	movw	r26, r8
 240:	a8 0f       	add	r26, r24
 242:	b1 1d       	adc	r27, r1
 244:	8c 91       	ld	r24, X
 246:	80 83       	st	Z, r24
        s32Num=(uint64_t)u64NumberReg % (uint64_t)10ul; //obtiene el digito de menor peso
        *pcPointerActual = (uint8_t)s32Num  + '0'; //pcConvierte el valor en caracter
    }  while((u64NumberReg /= (uint64_t)10ul)); //mientras exista un digito sigue el ciclo

    u64NumberReg=pcConvTemp+INT2STRINGMAX-1-pcPointerActual;//realiza la resta de cuantos caracteres se utilizaron
    for (s8I = (int8_t)u64NumberReg; s8I>=0; s8I--) //hace un ciclo burbuja optimizado
 248:	8a 8d       	ldd	r24, Y+26	; 0x1a
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	8a 8f       	std	Y+26, r24	; 0x1a
 24e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 250:	88 23       	and	r24, r24
 252:	84 f7       	brge	.-32     	; 0x234 <CONV__u8UIntToString+0x110>
    {
        ((char *)pcConv)[(uint8_t)s8I] = ((char *)pcPointerActual)[(uint8_t)s8I];
    }

    return u64NumberReg;
 254:	8b 8d       	ldd	r24, Y+27	; 0x1b
 256:	9c 8d       	ldd	r25, Y+28	; 0x1c
 258:	9d 8d       	ldd	r25, Y+29	; 0x1d
 25a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 25c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 25e:	98 a1       	ldd	r25, Y+32	; 0x20
 260:	99 a1       	ldd	r25, Y+33	; 0x21
 262:	9a a1       	ldd	r25, Y+34	; 0x22
}
 264:	a2 96       	adiw	r28, 0x22	; 34
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	8f 90       	pop	r8
 288:	7f 90       	pop	r7
 28a:	6f 90       	pop	r6
 28c:	08 95       	ret

0000028e <Task5>:
}
void Task5 (void)
{	
	static uint8_t u8Previous=PBUTTON2_READPIN;
	static uint8_t u8Actual=PBUTTON2_READPIN;
	u8Actual=PBUTTON2_READPORT & PBUTTON2_READPIN;
 28e:	89 b1       	in	r24, 0x09	; 9
 290:	81 70       	andi	r24, 0x01	; 1
 292:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <u8Actual.2127>
	
	LEDAMBER_OUT|=LEDAMBER_PIN;
 296:	8e 9a       	sbi	0x11, 6	; 17
	if(u8Previous!=u8Actual)
 298:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8Actual.2127>
 29c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <u8Previous.2126>
 2a0:	98 17       	cp	r25, r24
 2a2:	41 f0       	breq	.+16     	; 0x2b4 <Task5+0x26>
	{
		if(u8Actual==0)
 2a4:	81 11       	cpse	r24, r1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <Task5+0x26>
		{
			LEDAMBER_OUT&=~LEDAMBER_PIN;
 2a8:	8e 98       	cbi	0x11, 6	; 17
			MAIN_u8CountBUTTON2++;
 2aa:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__data_end>
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
		}
		
	}
	u8Previous=u8Actual;
 2b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8Actual.2127>
 2b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <u8Previous.2126>
 2bc:	08 95       	ret

000002be <Task6>:
} 
void Task6 (void)
{
	static uint8_t u8Previous=PBUTTON1_READPIN;
	static uint8_t u8Actual=PBUTTON1_READPIN;
	u8Actual=PBUTTON1_READPORT & PBUTTON1_READPIN;
 2be:	89 b1       	in	r24, 0x09	; 9
 2c0:	80 71       	andi	r24, 0x10	; 16
 2c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <u8Actual.2132>
	
	LEDBLUE_OUT|=LEDBLUE_PIN;
 2c6:	8d 9a       	sbi	0x11, 5	; 17
	if(u8Previous!=u8Actual)
 2c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Actual.2132>
 2cc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 2d0:	98 17       	cp	r25, r24
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <Task6+0x26>
	{
		if(u8Actual==0)
 2d4:	81 11       	cpse	r24, r1
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <Task6+0x26>
		{
			LEDBLUE_OUT&=~LEDBLUE_PIN;
 2d8:	8d 98       	cbi	0x11, 5	; 17
			MAIN_u8CountBUTTON1++;
 2da:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <MAIN_u8CountBUTTON1>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <MAIN_u8CountBUTTON1>
		}
		
	}
	u8Previous=u8Actual;
 2e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Actual.2132>
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ec:	08 95       	ret

000002ee <Task1>:
	OS__enAddPeriodicThreads(&Task5,250,&Task6,100);
	OS__enAddMainThreads(&Task1, &Task2);
	OS__vLaunch();
}
void Task1(void)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	2a 97       	sbiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
	char TASK1_cConv[10]=" ";
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	fe 01       	movw	r30, r28
 30c:	33 96       	adiw	r30, 0x03	; 3
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	df 01       	movw	r26, r30
 312:	1d 92       	st	X+, r1
 314:	8a 95       	dec	r24
 316:	e9 f7       	brne	.-6      	; 0x312 <Task1+0x24>
	uint16_t u16ValueBoton=0;
	uint16_t i=0;

	while(1)
	{
		u8Status=OS__u8StartCriticalSection();
 318:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OS__u8StartCriticalSection>
		u16ValueBoton=MAIN_u8CountBUTTON1;
 31c:	f0 90 07 03 	lds	r15, 0x0307	; 0x800307 <MAIN_u8CountBUTTON1>
		OS__vEndCriticalSection(u8Status);
 320:	0e 94 f5 04 	call	0x9ea	; 0x9ea <OS__vEndCriticalSection>
		u8Column=9;
		u8Row=1;
		CONV__u8UIntToString(u16ValueBoton,&TASK1_cConv[0]);
 324:	8e 01       	movw	r16, r28
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	2f 2d       	mov	r18, r15
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 92 00 	call	0x124	; 0x124 <CONV__u8UIntToString>
		OS__vWaitSemaphore(&MAIN_s8SemaphoreSPI);
 33e:	88 e0       	ldi	r24, 0x08	; 8
 340:	93 e0       	ldi	r25, 0x03	; 3
 342:	0e 94 55 06 	call	0xcaa	; 0xcaa <OS__vWaitSemaphore>
		//NOKIA5110__u8SendString((char*)"9",&u8Column,&u8Row);
		LEDGREEN_OUT|=LEDGREEN_PIN;
 346:	8f 9a       	sbi	0x11, 7	; 17
		OS__vSignalSemaphore(&MAIN_s8SemaphoreSPI);
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <OS__vSignalSemaphore>
 350:	e3 cf       	rjmp	.-58     	; 0x318 <Task1+0x2a>

00000352 <Task2>:
		
	}
}

void Task2 (void)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	2a 97       	sbiw	r28, 0x0a	; 10
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
	char TASK2_cConv[10]=" ";
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	fe 01       	movw	r30, r28
 370:	33 96       	adiw	r30, 0x03	; 3
 372:	88 e0       	ldi	r24, 0x08	; 8
 374:	df 01       	movw	r26, r30
 376:	1d 92       	st	X+, r1
 378:	8a 95       	dec	r24
 37a:	e9 f7       	brne	.-6      	; 0x376 <Task2+0x24>
	uint16_t u16ValueBoton=0;
	uint16_t i=0;

	while(1)
	{
		u8Status=OS__u8StartCriticalSection();
 37c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OS__u8StartCriticalSection>
		u16ValueBoton=MAIN_u8CountBUTTON2;
 380:	f0 90 06 03 	lds	r15, 0x0306	; 0x800306 <__data_end>
		OS__vEndCriticalSection(u8Status);
 384:	0e 94 f5 04 	call	0x9ea	; 0x9ea <OS__vEndCriticalSection>
		u8Column=9;
		u8Row=2;
		CONV__u8UIntToString(u16ValueBoton,&TASK2_cConv[0]);
 388:	8e 01       	movw	r16, r28
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
 38e:	2f 2d       	mov	r18, r15
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 92 00 	call	0x124	; 0x124 <CONV__u8UIntToString>
		OS__vWaitSemaphore(&MAIN_s8SemaphoreSPI);
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	93 e0       	ldi	r25, 0x03	; 3
 3a6:	0e 94 55 06 	call	0xcaa	; 0xcaa <OS__vWaitSemaphore>
		//NOKIA5110__u8SendString((char*)"10",&u8Column,&u8Row);
		LEDGREEN_OUT&=~LEDGREEN_PIN;
 3aa:	8f 98       	cbi	0x11, 7	; 17
		OS__vSignalSemaphore(&MAIN_s8SemaphoreSPI);
 3ac:	88 e0       	ldi	r24, 0x08	; 8
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <OS__vSignalSemaphore>
 3b4:	e3 cf       	rjmp	.-58     	; 0x37c <Task2+0x2a>

000003b6 <main>:
int8_t MAIN_s8SemaphoreSPI=0;
uint8_t MAIN_u8CountBUTTON1=0;
uint8_t MAIN_u8CountBUTTON2=0;

int main(void)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <main+0x6>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8Column=0, u8Row=0;
 3c0:	19 82       	std	Y+1, r1	; 0x01
 3c2:	1a 82       	std	Y+2, r1	; 0x02
	GPIO__vInitPort();
 3c4:	0e 94 b1 03 	call	0x762	; 0x762 <GPIO__vInitPort>
	NOKIA5110__vInit();
 3c8:	0e 94 25 02 	call	0x44a	; 0x44a <NOKIA5110__vInit>
	NOKIA5110__vSetCursor(0,0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 9f 02 	call	0x53e	; 0x53e <NOKIA5110__vSetCursor>
	NOKIA5110__vClear();
 3d4:	0e 94 b0 02 	call	0x560	; 0x560 <NOKIA5110__vClear>
	NOKIA5110__u16Print("InDev Mutex\n\rBoton 1:\n\rBoton 2:",&u8Column,&u8Row);
 3d8:	ae 01       	movw	r20, r28
 3da:	4e 5f       	subi	r20, 0xFE	; 254
 3dc:	5f 4f       	sbci	r21, 0xFF	; 255
 3de:	be 01       	movw	r22, r28
 3e0:	6f 5f       	subi	r22, 0xFF	; 255
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 c0 02 	call	0x580	; 0x580 <NOKIA5110__u16Print>
	OS__vInitSemaphore(&MAIN_s8SemaphoreSPI,SEMAPHORE_enInitMUTEX);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	88 e0       	ldi	r24, 0x08	; 8
 3f0:	93 e0       	ldi	r25, 0x03	; 3
 3f2:	0e 94 52 06 	call	0xca4	; 0xca4 <OS__vInitSemaphore>
	OS__enAddPeriodicThreads(&Task5,250,&Task6,100);
 3f6:	24 e6       	ldi	r18, 0x64	; 100
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	4f e5       	ldi	r20, 0x5F	; 95
 3fc:	51 e0       	ldi	r21, 0x01	; 1
 3fe:	6a ef       	ldi	r22, 0xFA	; 250
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	87 e4       	ldi	r24, 0x47	; 71
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 7d 05 	call	0xafa	; 0xafa <OS__enAddPeriodicThreads>
	OS__enAddMainThreads(&Task1, &Task2);
 40a:	69 ea       	ldi	r22, 0xA9	; 169
 40c:	71 e0       	ldi	r23, 0x01	; 1
 40e:	87 e7       	ldi	r24, 0x77	; 119
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 bc 05 	call	0xb78	; 0xb78 <OS__enAddMainThreads>
	OS__vLaunch();
 416:	0e 94 a1 06 	call	0xd42	; 0xd42 <OS__vLaunch>
}
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <NOKIA5110__vSendCommand>:
        }
        cString++; //el puntero apunta al siguiente caracter
        u8Count++; //suma 1 al count total de caracter enviados a la LCD
    }
    return u8Count;
}
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	1f 92       	push	r1
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	88 98       	cbi	0x11, 0	; 17
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 98 04 	call	0x930	; 0x930 <SPI__vSendDataMaster>
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <NOKIA5110__vInit>:
 44a:	0f 93       	push	r16
 44c:	80 9a       	sbi	0x10, 0	; 16
 44e:	88 98       	cbi	0x11, 0	; 17
 450:	04 e0       	ldi	r16, 0x04	; 4
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <SPI__vInit>
 45e:	8f e0       	ldi	r24, 0x0F	; 15
 460:	0e 94 87 04 	call	0x90e	; 0x90e <SPI__vInitPin>
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	9f ef       	ldi	r25, 0xFF	; 255
 468:	a5 e0       	ldi	r26, 0x05	; 5
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	a1 09       	sbc	r26, r1
 470:	b1 09       	sbc	r27, r1
 472:	e1 f7       	brne	.-8      	; 0x46c <NOKIA5110__vInit+0x22>
 474:	81 e2       	ldi	r24, 0x21	; 33
 476:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 47a:	80 eb       	ldi	r24, 0xB0	; 176
 47c:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 486:	84 e1       	ldi	r24, 0x14	; 20
 488:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 492:	8c e0       	ldi	r24, 0x0C	; 12
 494:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 498:	0f 91       	pop	r16
 49a:	08 95       	ret

0000049c <NOKIA5110__vSendData>:
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	1f 92       	push	r1
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	88 9a       	sbi	0x11, 0	; 17
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	0e 94 98 04 	call	0x930	; 0x930 <SPI__vSendDataMaster>
 4b6:	0f 90       	pop	r0
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <NOKIA5110__vSendChar>:
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	c0 ee       	ldi	r28, 0xE0	; 224
 4c4:	c8 0f       	add	r28, r24
 4c6:	0a f1       	brmi	.+66     	; 0x50a <NOKIA5110__vSendChar+0x4c>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 4ce:	8c 2f       	mov	r24, r28
 4d0:	cc 0f       	add	r28, r28
 4d2:	99 0b       	sbc	r25, r25
 4d4:	ec 01       	movw	r28, r24
 4d6:	cc 0f       	add	r28, r28
 4d8:	dd 1f       	adc	r29, r29
 4da:	cc 0f       	add	r28, r28
 4dc:	dd 1f       	adc	r29, r29
 4de:	c8 0f       	add	r28, r24
 4e0:	d9 1f       	adc	r29, r25
 4e2:	ca 5d       	subi	r28, 0xDA	; 218
 4e4:	de 4f       	sbci	r29, 0xFE	; 254
 4e6:	88 81       	ld	r24, Y
 4e8:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <NOKIA5110__vSetCursorChar>:
 510:	cf 93       	push	r28
 512:	c6 2f       	mov	r28, r22
 514:	8c 30       	cpi	r24, 0x0C	; 12
 516:	08 f0       	brcs	.+2      	; 0x51a <NOKIA5110__vSetCursorChar+0xa>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	c6 30       	cpi	r28, 0x06	; 6
 51c:	08 f0       	brcs	.+2      	; 0x520 <NOKIA5110__vSetCursorChar+0x10>
 51e:	c0 e0       	ldi	r28, 0x00	; 0
 520:	98 2f       	mov	r25, r24
 522:	99 0f       	add	r25, r25
 524:	99 0f       	add	r25, r25
 526:	99 0f       	add	r25, r25
 528:	98 1b       	sub	r25, r24
 52a:	89 2f       	mov	r24, r25
 52c:	80 68       	ori	r24, 0x80	; 128
 52e:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 532:	8c 2f       	mov	r24, r28
 534:	80 64       	ori	r24, 0x40	; 64
 536:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <NOKIA5110__vSetCursor>:
 53e:	cf 93       	push	r28
 540:	c6 2f       	mov	r28, r22
 542:	84 35       	cpi	r24, 0x54	; 84
 544:	08 f0       	brcs	.+2      	; 0x548 <NOKIA5110__vSetCursor+0xa>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	c6 30       	cpi	r28, 0x06	; 6
 54a:	08 f0       	brcs	.+2      	; 0x54e <NOKIA5110__vSetCursor+0x10>
 54c:	c0 e0       	ldi	r28, 0x00	; 0
 54e:	80 68       	ori	r24, 0x80	; 128
 550:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 554:	8c 2f       	mov	r24, r28
 556:	80 64       	ori	r24, 0x40	; 64
 558:	0e 94 14 02 	call	0x428	; 0x428 <NOKIA5110__vSendCommand>
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <NOKIA5110__vClear>:
*/



void NOKIA5110__vClear(void)
{
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	c8 ef       	ldi	r28, 0xF8	; 248
 566:	d1 e0       	ldi	r29, 0x01	; 1
  uint16_t u16I=0;
  for(u16I=0; u16I<(NOKIA5110_MAX_X*(NOKIA5110_MAX_Y/8)); u16I++){
      NOKIA5110__vSendData(0);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 4e 02 	call	0x49c	; 0x49c <NOKIA5110__vSendData>
 56e:	21 97       	sbiw	r28, 0x01	; 1


void NOKIA5110__vClear(void)
{
  uint16_t u16I=0;
  for(u16I=0; u16I<(NOKIA5110_MAX_X*(NOKIA5110_MAX_Y/8)); u16I++){
 570:	d9 f7       	brne	.-10     	; 0x568 <NOKIA5110__vClear+0x8>
      NOKIA5110__vSendData(0);
  }
  NOKIA5110__vSetCursor(0, 0);
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 9f 02 	call	0x53e	; 0x53e <NOKIA5110__vSetCursor>
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <NOKIA5110__u16Print>:
}



uint16_t NOKIA5110__u16Print(char* cString,uint8_t* u8Column, uint8_t* u8Row)
{
 580:	bf 92       	push	r11
 582:	cf 92       	push	r12
 584:	df 92       	push	r13
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	e8 2e       	mov	r14, r24
 594:	f9 2e       	mov	r15, r25
 596:	8b 01       	movw	r16, r22
 598:	6a 01       	movw	r12, r20
 59a:	fb 01       	movw	r30, r22
 59c:	80 81       	ld	r24, Z
 59e:	8f 70       	andi	r24, 0x0F	; 15
    uint16_t u16Count=0;//variable usada para saber cuantos caracteres se mandaron a la LCD
    uint8_t  u8Exit=0; //variable que funciona cuanod encuentra un ESC
    uint16_t u16Delay; //utilizada para los comandos como clear y home
    if(((*u8Column)&0xF)>(NOKIA5110_COLUMN_SIZE-1))
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	2c 30       	cpi	r18, 0x0C	; 12
 5a6:	31 05       	cpc	r19, r1
 5a8:	14 f0       	brlt	.+4      	; 0x5ae <NOKIA5110__u16Print+0x2e>
    {
        *u8Column=0;
 5aa:	10 82       	st	Z, r1
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <NOKIA5110__u16Print+0x32>
    }
    else
    {
        (*u8Column)&=0xF;
 5ae:	fb 01       	movw	r30, r22
 5b0:	80 83       	st	Z, r24
    }
    if(*u8Row>(NOKIA5110_ROW_SIZE-1))
 5b2:	f6 01       	movw	r30, r12
 5b4:	80 81       	ld	r24, Z
 5b6:	86 30       	cpi	r24, 0x06	; 6
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <NOKIA5110__u16Print+0x3c>
        *u8Row=0;
 5ba:	10 82       	st	Z, r1
		
    NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //indica la posicion inicial del cursor
 5bc:	f6 01       	movw	r30, r12
 5be:	60 81       	ld	r22, Z
 5c0:	f8 01       	movw	r30, r16
 5c2:	80 81       	ld	r24, Z
 5c4:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
 5c8:	ce 2d       	mov	r28, r14
 5ca:	df 2d       	mov	r29, r15



uint16_t NOKIA5110__u16Print(char* cString,uint8_t* u8Column, uint8_t* u8Row)
{
    uint16_t u16Count=0;//variable usada para saber cuantos caracteres se mandaron a la LCD
 5cc:	e1 2c       	mov	r14, r1
 5ce:	f1 2c       	mov	r15, r1
                if(((*u8Column)!=0))
                    (*u8Column)--;
                else
                    if(((*u8Row)!=0))
                    {
                        (*u8Column)=NOKIA5110_COLUMN_SIZE-1;
 5d0:	0f 2e       	mov	r0, r31
 5d2:	fb e0       	ldi	r31, 0x0B	; 11
 5d4:	bf 2e       	mov	r11, r31
 5d6:	f0 2d       	mov	r31, r0
    }
    if(*u8Row>(NOKIA5110_ROW_SIZE-1))
        *u8Row=0;
		
    NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //indica la posicion inicial del cursor
    while(*cString)// realiza el ciclo mientras la cString tenga algun valor
 5d8:	b1 c0       	rjmp	.+354    	; 0x73c <NOKIA5110__u16Print+0x1bc>
           //el valor 0 o '\0' es fin de cString
    {
        switch (*cString) //detecta si existe un caracter especial
 5da:	48 2f       	mov	r20, r24
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	fa 01       	movw	r30, r20
 5e0:	37 97       	sbiw	r30, 0x07	; 7
 5e2:	e5 31       	cpi	r30, 0x15	; 21
 5e4:	f1 05       	cpc	r31, r1
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <NOKIA5110__u16Print+0x6a>
 5e8:	86 c0       	rjmp	.+268    	; 0x6f6 <NOKIA5110__u16Print+0x176>
 5ea:	ea 5a       	subi	r30, 0xAA	; 170
 5ec:	ff 4f       	sbci	r31, 0xFF	; 255
 5ee:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__tablejump2__>
        {
        case '\n': //salto de linea
            (*u8Row)++; //aumenta la u8Row
 5f2:	f6 01       	movw	r30, r12
 5f4:	80 81       	ld	r24, Z
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
            if(*u8Row>(NOKIA5110_ROW_SIZE-1))
 5f8:	86 30       	cpi	r24, 0x06	; 6
 5fa:	10 f4       	brcc	.+4      	; 0x600 <NOKIA5110__u16Print+0x80>
           //el valor 0 o '\0' es fin de cString
    {
        switch (*cString) //detecta si existe un caracter especial
        {
        case '\n': //salto de linea
            (*u8Row)++; //aumenta la u8Row
 5fc:	80 83       	st	Z, r24
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <NOKIA5110__u16Print+0x84>
            if(*u8Row>(NOKIA5110_ROW_SIZE-1))
                *u8Row=0;
 600:	f6 01       	movw	r30, r12
 602:	10 82       	st	Z, r1
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion
 604:	f6 01       	movw	r30, r12
 606:	60 81       	ld	r22, Z
 608:	f8 01       	movw	r30, r16
 60a:	80 81       	ld	r24, Z
 60c:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            break;
 610:	99 c0       	rjmp	.+306    	; 0x744 <NOKIA5110__u16Print+0x1c4>
        case '\r': //retorno de carro
            *u8Column=0; //actualiza el valor de la u8Column a la primera posicion
 612:	f8 01       	movw	r30, r16
 614:	10 82       	st	Z, r1
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion
 616:	f6 01       	movw	r30, r12
 618:	60 81       	ld	r22, Z
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            break;
 620:	91 c0       	rjmp	.+290    	; 0x744 <NOKIA5110__u16Print+0x1c4>
        case '\t': //tabulacion
            if(((*u8Column)&0xF)<(NOKIA5110_COLUMN_SIZE-NOKIA5110_TAB_SIZE))
 622:	f8 01       	movw	r30, r16
 624:	20 81       	ld	r18, Z
 626:	82 2f       	mov	r24, r18
 628:	8f 70       	andi	r24, 0x0F	; 15
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	09 97       	sbiw	r24, 0x09	; 9
 62e:	1c f4       	brge	.+6      	; 0x636 <NOKIA5110__u16Print+0xb6>
                *u8Column+=NOKIA5110_TAB_SIZE; //aumenta 3 espacios vacios
 630:	2d 5f       	subi	r18, 0xFD	; 253
 632:	20 83       	st	Z, r18
 634:	0b c0       	rjmp	.+22     	; 0x64c <NOKIA5110__u16Print+0xcc>
            else
            {
                *u8Column=0; // pasa a la siguiente u8Row si no cabe la tabulacion
 636:	f8 01       	movw	r30, r16
 638:	10 82       	st	Z, r1
                (*u8Row)++; //aumenta la u8Row
 63a:	f6 01       	movw	r30, r12
 63c:	80 81       	ld	r24, Z
 63e:	8f 5f       	subi	r24, 0xFF	; 255
                if(*u8Row>(NOKIA5110_ROW_SIZE-1))
 640:	86 30       	cpi	r24, 0x06	; 6
 642:	10 f4       	brcc	.+4      	; 0x648 <NOKIA5110__u16Print+0xc8>
            if(((*u8Column)&0xF)<(NOKIA5110_COLUMN_SIZE-NOKIA5110_TAB_SIZE))
                *u8Column+=NOKIA5110_TAB_SIZE; //aumenta 3 espacios vacios
            else
            {
                *u8Column=0; // pasa a la siguiente u8Row si no cabe la tabulacion
                (*u8Row)++; //aumenta la u8Row
 644:	80 83       	st	Z, r24
 646:	02 c0       	rjmp	.+4      	; 0x64c <NOKIA5110__u16Print+0xcc>
                if(*u8Row>(NOKIA5110_ROW_SIZE-1))
                    *u8Row=0;
 648:	f6 01       	movw	r30, r12
 64a:	10 82       	st	Z, r1
            }
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion
 64c:	f6 01       	movw	r30, r12
 64e:	60 81       	ld	r22, Z
 650:	f8 01       	movw	r30, r16
 652:	80 81       	ld	r24, Z
 654:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            break;
 658:	75 c0       	rjmp	.+234    	; 0x744 <NOKIA5110__u16Print+0x1c4>
         case '\b': //retroceso
            if(((*u8Column)!=0) || ((*u8Row)!=0)) //si la u8Column y u8Row es diferente a 0 puede retroceder
 65a:	f8 01       	movw	r30, r16
 65c:	80 81       	ld	r24, Z
 65e:	81 11       	cpse	r24, r1
 660:	05 c0       	rjmp	.+10     	; 0x66c <NOKIA5110__u16Print+0xec>
 662:	f6 01       	movw	r30, r12
 664:	80 81       	ld	r24, Z
 666:	81 11       	cpse	r24, r1
 668:	05 c0       	rjmp	.+10     	; 0x674 <NOKIA5110__u16Print+0xf4>
 66a:	0a c0       	rjmp	.+20     	; 0x680 <NOKIA5110__u16Print+0x100>
            {
                if(((*u8Column)!=0)) //si la u8Column encuentra entre 1 y 15 puede disminuir uno
                    (*u8Column)--;
 66c:	81 50       	subi	r24, 0x01	; 1
 66e:	f8 01       	movw	r30, r16
 670:	80 83       	st	Z, r24
 672:	06 c0       	rjmp	.+12     	; 0x680 <NOKIA5110__u16Print+0x100>
                else
                    if(((*u8Row)!=0)) //si la u8Column es 0 entonces checa si existen rows que disminuir
                    {
                        (*u8Column)=NOKIA5110_COLUMN_SIZE-1;
 674:	f8 01       	movw	r30, r16
 676:	b0 82       	st	Z, r11
                        (*u8Row)--;
 678:	f6 01       	movw	r30, r12
 67a:	80 81       	ld	r24, Z
 67c:	81 50       	subi	r24, 0x01	; 1
 67e:	80 83       	st	Z, r24
                    }
            }
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion
 680:	f6 01       	movw	r30, r12
 682:	60 81       	ld	r22, Z
 684:	f8 01       	movw	r30, r16
 686:	80 81       	ld	r24, Z
 688:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            break;
 68c:	5b c0       	rjmp	.+182    	; 0x744 <NOKIA5110__u16Print+0x1c4>
        case '\a'://borrado (ascii sonido)
            if(((*u8Column)!=0) || ((*u8Row)!=0)) //si la u8Column es diferente a 0 puede retroceder
 68e:	f8 01       	movw	r30, r16
 690:	80 81       	ld	r24, Z
 692:	81 11       	cpse	r24, r1
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <NOKIA5110__u16Print+0x120>
 696:	f6 01       	movw	r30, r12
 698:	80 81       	ld	r24, Z
 69a:	81 11       	cpse	r24, r1
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <NOKIA5110__u16Print+0x128>
 69e:	0a c0       	rjmp	.+20     	; 0x6b4 <NOKIA5110__u16Print+0x134>
            {
                if(((*u8Column)!=0))
                    (*u8Column)--;
 6a0:	81 50       	subi	r24, 0x01	; 1
 6a2:	f8 01       	movw	r30, r16
 6a4:	80 83       	st	Z, r24
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <NOKIA5110__u16Print+0x134>
                else
                    if(((*u8Row)!=0))
                    {
                        (*u8Column)=NOKIA5110_COLUMN_SIZE-1;
 6a8:	f8 01       	movw	r30, r16
 6aa:	b0 82       	st	Z, r11
                        (*u8Row)--;
 6ac:	f6 01       	movw	r30, r12
 6ae:	80 81       	ld	r24, Z
 6b0:	81 50       	subi	r24, 0x01	; 1
 6b2:	80 83       	st	Z, r24
                    }
            }
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion
 6b4:	f6 01       	movw	r30, r12
 6b6:	60 81       	ld	r22, Z
 6b8:	f8 01       	movw	r30, r16
 6ba:	80 81       	ld	r24, Z
 6bc:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            NOKIA5110__vSendChar(' ');//borra el caracter que pudiera haber en la posicion
 6c0:	80 e2       	ldi	r24, 0x20	; 32
 6c2:	0e 94 5f 02 	call	0x4be	; 0x4be <NOKIA5110__vSendChar>
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion
 6c6:	f6 01       	movw	r30, r12
 6c8:	60 81       	ld	r22, Z
 6ca:	f8 01       	movw	r30, r16
 6cc:	80 81       	ld	r24, Z
 6ce:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            break;
 6d2:	38 c0       	rjmp	.+112    	; 0x744 <NOKIA5110__u16Print+0x1c4>
        case '\e': //escape
            u8Exit=1;//indica que se necesita u8Exit de la funcion
            break;
        case '\f': //nueva pagina
            *u8Column=*u8Row=0;//reinicia los valores
 6d4:	f6 01       	movw	r30, r12
 6d6:	10 82       	st	Z, r1
 6d8:	f8 01       	movw	r30, r16
 6da:	10 82       	st	Z, r1
            NOKIA5110__vClear(); //limpia la pantalla
 6dc:	0e 94 b0 02 	call	0x560	; 0x560 <NOKIA5110__vClear>
 6e0:	88 eb       	ldi	r24, 0xB8	; 184
 6e2:	9b e0       	ldi	r25, 0x0B	; 11
 6e4:	01 97       	sbiw	r24, 0x01	; 1
            for(u16Delay=3000; u16Delay>0; u16Delay--);//1.60 ms aprox a 16MHz
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <NOKIA5110__u16Print+0x164>
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion a 0,0
 6e8:	f6 01       	movw	r30, r12
 6ea:	60 81       	ld	r22, Z
 6ec:	f8 01       	movw	r30, r16
 6ee:	80 81       	ld	r24, Z
 6f0:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
            break;
 6f4:	27 c0       	rjmp	.+78     	; 0x744 <NOKIA5110__u16Print+0x1c4>
        default :
            NOKIA5110__vSendChar(*(cString)); //envia el caracter correspondiente
 6f6:	0e 94 5f 02 	call	0x4be	; 0x4be <NOKIA5110__vSendChar>
            (*u8Column)++; //suma 1 a la u8Column indicando que se ha escrito un valor
 6fa:	f8 01       	movw	r30, r16
 6fc:	80 81       	ld	r24, Z
 6fe:	8f 5f       	subi	r24, 0xFF	; 255
            if(((*u8Column)&0xF)>(NOKIA5110_COLUMN_SIZE-1)) //si la u8Column es 0 indica que empieza una nueva u8Row
 700:	28 2f       	mov	r18, r24
 702:	2f 70       	andi	r18, 0x0F	; 15
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	2c 30       	cpi	r18, 0x0C	; 12
 708:	31 05       	cpc	r19, r1
 70a:	14 f4       	brge	.+4      	; 0x710 <NOKIA5110__u16Print+0x190>
            for(u16Delay=3000; u16Delay>0; u16Delay--);//1.60 ms aprox a 16MHz
            NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //actualiza la posicion a 0,0
            break;
        default :
            NOKIA5110__vSendChar(*(cString)); //envia el caracter correspondiente
            (*u8Column)++; //suma 1 a la u8Column indicando que se ha escrito un valor
 70c:	80 83       	st	Z, r24
 70e:	1a c0       	rjmp	.+52     	; 0x744 <NOKIA5110__u16Print+0x1c4>
            if(((*u8Column)&0xF)>(NOKIA5110_COLUMN_SIZE-1)) //si la u8Column es 0 indica que empieza una nueva u8Row
            {
                (*u8Column)=0;
 710:	f8 01       	movw	r30, r16
 712:	10 82       	st	Z, r1
                (*u8Row)++; //aumenta la u8Row
 714:	f6 01       	movw	r30, r12
 716:	80 81       	ld	r24, Z
 718:	8f 5f       	subi	r24, 0xFF	; 255
                if(*u8Row>(NOKIA5110_ROW_SIZE-1))
 71a:	86 30       	cpi	r24, 0x06	; 6
 71c:	10 f4       	brcc	.+4      	; 0x722 <NOKIA5110__u16Print+0x1a2>
            NOKIA5110__vSendChar(*(cString)); //envia el caracter correspondiente
            (*u8Column)++; //suma 1 a la u8Column indicando que se ha escrito un valor
            if(((*u8Column)&0xF)>(NOKIA5110_COLUMN_SIZE-1)) //si la u8Column es 0 indica que empieza una nueva u8Row
            {
                (*u8Column)=0;
                (*u8Row)++; //aumenta la u8Row
 71e:	80 83       	st	Z, r24
 720:	02 c0       	rjmp	.+4      	; 0x726 <NOKIA5110__u16Print+0x1a6>
                if(*u8Row>(NOKIA5110_ROW_SIZE-1))
                    *u8Row=0;
 722:	f6 01       	movw	r30, r12
 724:	10 82       	st	Z, r1
                NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //pone el cursor en 0,x
 726:	f6 01       	movw	r30, r12
 728:	60 81       	ld	r22, Z
 72a:	f8 01       	movw	r30, r16
 72c:	80 81       	ld	r24, Z
 72e:	0e 94 88 02 	call	0x510	; 0x510 <NOKIA5110__vSetCursorChar>
 732:	08 c0       	rjmp	.+16     	; 0x744 <NOKIA5110__u16Print+0x1c4>
            }
            break;
        }
        cString++; //el puntero apunta al siguiente caracter
        u16Count++; //suma 1 al u16Count total de caracter enviados a la LCD
 734:	ff ef       	ldi	r31, 0xFF	; 255
 736:	ef 1a       	sub	r14, r31
 738:	ff 0a       	sbc	r15, r31
 73a:	08 c0       	rjmp	.+16     	; 0x74c <NOKIA5110__u16Print+0x1cc>
    }
    if(*u8Row>(NOKIA5110_ROW_SIZE-1))
        *u8Row=0;
		
    NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //indica la posicion inicial del cursor
    while(*cString)// realiza el ciclo mientras la cString tenga algun valor
 73c:	89 91       	ld	r24, Y+
 73e:	81 11       	cpse	r24, r1
 740:	4c cf       	rjmp	.-360    	; 0x5da <NOKIA5110__u16Print+0x5a>
 742:	04 c0       	rjmp	.+8      	; 0x74c <NOKIA5110__u16Print+0x1cc>
                NOKIA5110__vSetCursorChar(*u8Column,*u8Row); //pone el cursor en 0,x
            }
            break;
        }
        cString++; //el puntero apunta al siguiente caracter
        u16Count++; //suma 1 al u16Count total de caracter enviados a la LCD
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	e8 1a       	sub	r14, r24
 748:	f8 0a       	sbc	r15, r24
 74a:	f8 cf       	rjmp	.-16     	; 0x73c <NOKIA5110__u16Print+0x1bc>
        if(u8Exit) //si detecto un \e (escape) sale del ciclo while
            break;
    }
     return u16Count; //regresa el u16Count de caracteres y caracteres especiales
}
 74c:	c7 01       	movw	r24, r14
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
 75e:	bf 90       	pop	r11
 760:	08 95       	ret

00000762 <GPIO__vInitPort>:
}
uint8_t GPIO__u8GetCounterRisingINT0(void)
{
	return GPIO_u8CountINT0;
	
}
 762:	85 b7       	in	r24, 0x35	; 53
 764:	8f 7e       	andi	r24, 0xEF	; 239
 766:	85 bf       	out	0x35, r24	; 53
 768:	54 98       	cbi	0x0a, 4	; 10
 76a:	5c 9a       	sbi	0x0b, 4	; 11
 76c:	50 98       	cbi	0x0a, 0	; 10
 76e:	58 9a       	sbi	0x0b, 0	; 11
 770:	51 98       	cbi	0x0a, 1	; 10
 772:	59 9a       	sbi	0x0b, 1	; 11
 774:	3f 9a       	sbi	0x07, 7	; 7
 776:	87 9a       	sbi	0x10, 7	; 16
 778:	86 9a       	sbi	0x10, 6	; 16
 77a:	85 9a       	sbi	0x10, 5	; 16
 77c:	47 98       	cbi	0x08, 7	; 8
 77e:	8f 98       	cbi	0x11, 7	; 17
 780:	8e 98       	cbi	0x11, 6	; 17
 782:	8d 98       	cbi	0x11, 5	; 17
 784:	08 95       	ret

00000786 <__vector_1>:

/*Interrupt for INT0 PD2*/
ISR(INT0_vect)
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	8f 93       	push	r24
	GPIO_u8CountINT0++;
 792:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <GPIO_u8CountINT0>
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <GPIO_u8CountINT0>
}
 79c:	8f 91       	pop	r24
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_9>:

ISR(PCINT0_vect)
{
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	8f 93       	push	r24
 7b6:	9f 93       	push	r25
	static uint8_t u8PreviousValuePB1=(1<<PINB1);
	static uint8_t u8PreviousValuePB2=(1<<PINB2);
	
	uint8_t u8ActualValuePB1=(PINB & (1<<PINB1));
 7b8:	93 b1       	in	r25, 0x03	; 3
 7ba:	92 70       	andi	r25, 0x02	; 2
	uint8_t u8ActualValuePB2=(PINB & (1<<PINB2));
 7bc:	83 b1       	in	r24, 0x03	; 3
 7be:	84 70       	andi	r24, 0x04	; 4
	if(u8ActualValuePB1 != u8PreviousValuePB1 )
 7c0:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <u8PreviousValuePB1.1665>
 7c4:	92 17       	cp	r25, r18
 7c6:	21 f0       	breq	.+8      	; 0x7d0 <__vector_9+0x28>
	{
		if( u8ActualValuePB1==0)/*Pin change from 5v to 0v Falling edge*/
 7c8:	91 11       	cpse	r25, r1
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <__vector_9+0x28>
		{
			GPIO_u8CountPCINT2=0;
 7cc:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{
		}
	}
	if(u8ActualValuePB2 != u8PreviousValuePB2 )
 7d0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <u8PreviousValuePB2.1666>
 7d4:	82 17       	cp	r24, r18
 7d6:	39 f0       	breq	.+14     	; 0x7e6 <__vector_9+0x3e>
	{
		if( u8ActualValuePB2==0)/*Pin change from 5v to 0v Falling edge*/
 7d8:	81 11       	cpse	r24, r1
 7da:	05 c0       	rjmp	.+10     	; 0x7e6 <__vector_9+0x3e>
		{
			GPIO_u8CountPCINT2++;	
 7dc:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <GPIO_u8CountPCINT2>
 7e0:	2f 5f       	subi	r18, 0xFF	; 255
 7e2:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{	
		}
	}
	u8PreviousValuePB1=u8ActualValuePB1;
 7e6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <u8PreviousValuePB1.1665>
	u8PreviousValuePB2=u8ActualValuePB2;
 7ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8PreviousValuePB2.1666>
}
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <SPI__vInit>:
		pu8DataIn++;
		pu8DataOut++;
		s16DataNumber--;
	}
	
	PORTB|=(1<<DDB0);
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	9c b5       	in	r25, 0x2c	; 44
 804:	9f 7b       	andi	r25, 0xBF	; 191
 806:	9c bd       	out	0x2c, r25	; 44
 808:	81 11       	cpse	r24, r1
 80a:	04 c0       	rjmp	.+8      	; 0x814 <SPI__vInit+0x16>
 80c:	8c b5       	in	r24, 0x2c	; 44
 80e:	8f 7e       	andi	r24, 0xEF	; 239
 810:	8c bd       	out	0x2c, r24	; 44
 812:	03 c0       	rjmp	.+6      	; 0x81a <SPI__vInit+0x1c>
 814:	8c b5       	in	r24, 0x2c	; 44
 816:	80 61       	ori	r24, 0x10	; 16
 818:	8c bd       	out	0x2c, r24	; 44
 81a:	61 11       	cpse	r22, r1
 81c:	04 c0       	rjmp	.+8      	; 0x826 <SPI__vInit+0x28>
 81e:	8c b5       	in	r24, 0x2c	; 44
 820:	8f 7d       	andi	r24, 0xDF	; 223
 822:	8c bd       	out	0x2c, r24	; 44
 824:	03 c0       	rjmp	.+6      	; 0x82c <SPI__vInit+0x2e>
 826:	8c b5       	in	r24, 0x2c	; 44
 828:	80 62       	ori	r24, 0x20	; 32
 82a:	8c bd       	out	0x2c, r24	; 44
 82c:	41 11       	cpse	r20, r1
 82e:	04 c0       	rjmp	.+8      	; 0x838 <SPI__vInit+0x3a>
 830:	8c b5       	in	r24, 0x2c	; 44
 832:	87 7f       	andi	r24, 0xF7	; 247
 834:	8c bd       	out	0x2c, r24	; 44
 836:	03 c0       	rjmp	.+6      	; 0x83e <SPI__vInit+0x40>
 838:	8c b5       	in	r24, 0x2c	; 44
 83a:	88 60       	ori	r24, 0x08	; 8
 83c:	8c bd       	out	0x2c, r24	; 44
 83e:	21 11       	cpse	r18, r1
 840:	04 c0       	rjmp	.+8      	; 0x84a <SPI__vInit+0x4c>
 842:	8c b5       	in	r24, 0x2c	; 44
 844:	8b 7f       	andi	r24, 0xFB	; 251
 846:	8c bd       	out	0x2c, r24	; 44
 848:	03 c0       	rjmp	.+6      	; 0x850 <SPI__vInit+0x52>
 84a:	8c b5       	in	r24, 0x2c	; 44
 84c:	84 60       	ori	r24, 0x04	; 4
 84e:	8c bd       	out	0x2c, r24	; 44
 850:	8c b5       	in	r24, 0x2c	; 44
 852:	8c 7f       	andi	r24, 0xFC	; 252
 854:	8c bd       	out	0x2c, r24	; 44
 856:	8d b5       	in	r24, 0x2d	; 45
 858:	8e 7f       	andi	r24, 0xFE	; 254
 85a:	8d bd       	out	0x2d, r24	; 45
 85c:	10 e0       	ldi	r17, 0x00	; 0
 85e:	08 30       	cpi	r16, 0x08	; 8
 860:	11 05       	cpc	r17, r1
 862:	08 f0       	brcs	.+2      	; 0x866 <SPI__vInit+0x68>
 864:	4e c0       	rjmp	.+156    	; 0x902 <SPI__vInit+0x104>
 866:	f8 01       	movw	r30, r16
 868:	e5 59       	subi	r30, 0x95	; 149
 86a:	ff 4f       	sbci	r31, 0xFF	; 255
 86c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__tablejump2__>
 870:	8c b5       	in	r24, 0x2c	; 44
 872:	8c 7f       	andi	r24, 0xFC	; 252
 874:	8c bd       	out	0x2c, r24	; 44
 876:	8d b5       	in	r24, 0x2d	; 45
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	8d bd       	out	0x2d, r24	; 45
 87c:	42 c0       	rjmp	.+132    	; 0x902 <SPI__vInit+0x104>
 87e:	8c b5       	in	r24, 0x2c	; 44
 880:	8c 7f       	andi	r24, 0xFC	; 252
 882:	8c bd       	out	0x2c, r24	; 44
 884:	8d b5       	in	r24, 0x2d	; 45
 886:	8e 7f       	andi	r24, 0xFE	; 254
 888:	8d bd       	out	0x2d, r24	; 45
 88a:	3b c0       	rjmp	.+118    	; 0x902 <SPI__vInit+0x104>
 88c:	8c b5       	in	r24, 0x2c	; 44
 88e:	8d 7f       	andi	r24, 0xFD	; 253
 890:	8c bd       	out	0x2c, r24	; 44
 892:	8c b5       	in	r24, 0x2c	; 44
 894:	81 60       	ori	r24, 0x01	; 1
 896:	8c bd       	out	0x2c, r24	; 44
 898:	8d b5       	in	r24, 0x2d	; 45
 89a:	81 60       	ori	r24, 0x01	; 1
 89c:	8d bd       	out	0x2d, r24	; 45
 89e:	31 c0       	rjmp	.+98     	; 0x902 <SPI__vInit+0x104>
 8a0:	8c b5       	in	r24, 0x2c	; 44
 8a2:	8d 7f       	andi	r24, 0xFD	; 253
 8a4:	8c bd       	out	0x2c, r24	; 44
 8a6:	8c b5       	in	r24, 0x2c	; 44
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	8c bd       	out	0x2c, r24	; 44
 8ac:	8d b5       	in	r24, 0x2d	; 45
 8ae:	8e 7f       	andi	r24, 0xFE	; 254
 8b0:	8d bd       	out	0x2d, r24	; 45
 8b2:	27 c0       	rjmp	.+78     	; 0x902 <SPI__vInit+0x104>
 8b4:	8c b5       	in	r24, 0x2c	; 44
 8b6:	8e 7f       	andi	r24, 0xFE	; 254
 8b8:	8c bd       	out	0x2c, r24	; 44
 8ba:	8c b5       	in	r24, 0x2c	; 44
 8bc:	82 60       	ori	r24, 0x02	; 2
 8be:	8c bd       	out	0x2c, r24	; 44
 8c0:	8d b5       	in	r24, 0x2d	; 45
 8c2:	81 60       	ori	r24, 0x01	; 1
 8c4:	8d bd       	out	0x2d, r24	; 45
 8c6:	1d c0       	rjmp	.+58     	; 0x902 <SPI__vInit+0x104>
 8c8:	8c b5       	in	r24, 0x2c	; 44
 8ca:	8e 7f       	andi	r24, 0xFE	; 254
 8cc:	8c bd       	out	0x2c, r24	; 44
 8ce:	8c b5       	in	r24, 0x2c	; 44
 8d0:	82 60       	ori	r24, 0x02	; 2
 8d2:	8c bd       	out	0x2c, r24	; 44
 8d4:	8d b5       	in	r24, 0x2d	; 45
 8d6:	8e 7f       	andi	r24, 0xFE	; 254
 8d8:	8d bd       	out	0x2d, r24	; 45
 8da:	13 c0       	rjmp	.+38     	; 0x902 <SPI__vInit+0x104>
 8dc:	8c b5       	in	r24, 0x2c	; 44
 8de:	81 60       	ori	r24, 0x01	; 1
 8e0:	8c bd       	out	0x2c, r24	; 44
 8e2:	8c b5       	in	r24, 0x2c	; 44
 8e4:	82 60       	ori	r24, 0x02	; 2
 8e6:	8c bd       	out	0x2c, r24	; 44
 8e8:	8d b5       	in	r24, 0x2d	; 45
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	8d bd       	out	0x2d, r24	; 45
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <SPI__vInit+0x104>
 8f0:	8c b5       	in	r24, 0x2c	; 44
 8f2:	81 60       	ori	r24, 0x01	; 1
 8f4:	8c bd       	out	0x2c, r24	; 44
 8f6:	8c b5       	in	r24, 0x2c	; 44
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	8c bd       	out	0x2c, r24	; 44
 8fc:	8d b5       	in	r24, 0x2d	; 45
 8fe:	8e 7f       	andi	r24, 0xFE	; 254
 900:	8d bd       	out	0x2d, r24	; 45
 902:	8c b5       	in	r24, 0x2c	; 44
 904:	80 64       	ori	r24, 0x40	; 64
 906:	8c bd       	out	0x2c, r24	; 44
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <SPI__vInitPin>:
 90e:	83 ff       	sbrs	r24, 3
 910:	02 c0       	rjmp	.+4      	; 0x916 <SPI__vInitPin+0x8>
 912:	21 9a       	sbi	0x04, 1	; 4
 914:	29 98       	cbi	0x05, 1	; 5
 916:	81 ff       	sbrs	r24, 1
 918:	02 c0       	rjmp	.+4      	; 0x91e <SPI__vInitPin+0x10>
 91a:	23 98       	cbi	0x04, 3	; 4
 91c:	2b 9a       	sbi	0x05, 3	; 5
 91e:	82 ff       	sbrs	r24, 2
 920:	02 c0       	rjmp	.+4      	; 0x926 <SPI__vInitPin+0x18>
 922:	22 9a       	sbi	0x04, 2	; 4
 924:	2a 98       	cbi	0x05, 2	; 5
 926:	80 ff       	sbrs	r24, 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <SPI__vInitPin+0x20>
 92a:	20 9a       	sbi	0x04, 0	; 4
 92c:	28 9a       	sbi	0x05, 0	; 5
 92e:	08 95       	ret

00000930 <SPI__vSendDataMaster>:
}
void SPI__vSendDataMaster(uint8_t* pu8DataOut,int16_t s16DataNumber )
{
	uint8_t u8Dummy=0;
	if((SPSR&(1<<SPIF))==(1<<SPIF))
 930:	0d b4       	in	r0, 0x2d	; 45
 932:	07 fc       	sbrc	r0, 7
	u8Dummy=SPDR;
 934:	2e b5       	in	r18, 0x2e	; 46
	
	PORTB&=~(1<<DDB0);
 936:	28 98       	cbi	0x05, 0	; 5
	while((uint16_t)s16DataNumber>0)
 938:	61 15       	cp	r22, r1
 93a:	71 05       	cpc	r23, r1
 93c:	79 f0       	breq	.+30     	; 0x95c <SPI__vSendDataMaster+0x2c>
 93e:	fc 01       	movw	r30, r24
 940:	68 0f       	add	r22, r24
 942:	79 1f       	adc	r23, r25
	{
		SPCR|=(1<<MSTR);
 944:	9c b5       	in	r25, 0x2c	; 44
 946:	90 61       	ori	r25, 0x10	; 16
 948:	9c bd       	out	0x2c, r25	; 44
		SPDR=*pu8DataOut;
 94a:	91 91       	ld	r25, Z+
 94c:	9e bd       	out	0x2e, r25	; 46
		while((SPSR&(1<<SPIF))==0);
 94e:	0d b4       	in	r0, 0x2d	; 45
 950:	07 fe       	sbrs	r0, 7
 952:	fd cf       	rjmp	.-6      	; 0x94e <SPI__vSendDataMaster+0x1e>
		u8Dummy=SPDR;
 954:	8e b5       	in	r24, 0x2e	; 46
	uint8_t u8Dummy=0;
	if((SPSR&(1<<SPIF))==(1<<SPIF))
	u8Dummy=SPDR;
	
	PORTB&=~(1<<DDB0);
	while((uint16_t)s16DataNumber>0)
 956:	e6 17       	cp	r30, r22
 958:	f7 07       	cpc	r31, r23
 95a:	a1 f7       	brne	.-24     	; 0x944 <SPI__vSendDataMaster+0x14>
		u8Dummy=SPDR;
		pu8DataOut++;
		s16DataNumber--;
	}
	
	PORTB|=(1<<DDB0);
 95c:	28 9a       	sbi	0x05, 0	; 5
 95e:	08 95       	ret

00000960 <Timer0__vInit>:
{
	TIMSK0= ((uint8_t)enInterrupt&0x07);
	
}void Timer0__vDisableInterrupt(Timer0_nInterrupt enInterrupt)
{
	TIMSK0&=~((uint8_t)enInterrupt&0x07);
 960:	95 b5       	in	r25, 0x25	; 37
 962:	98 7f       	andi	r25, 0xF8	; 248
 964:	95 bd       	out	0x25, r25	; 37
 966:	94 b5       	in	r25, 0x24	; 36
 968:	9c 7f       	andi	r25, 0xFC	; 252
 96a:	94 bd       	out	0x24, r25	; 36
 96c:	95 b5       	in	r25, 0x25	; 37
 96e:	97 7f       	andi	r25, 0xF7	; 247
 970:	95 bd       	out	0x25, r25	; 37
 972:	83 30       	cpi	r24, 0x03	; 3
 974:	a1 f0       	breq	.+40     	; 0x99e <Timer0__vInit+0x3e>
 976:	28 f4       	brcc	.+10     	; 0x982 <Timer0__vInit+0x22>
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	41 f0       	breq	.+16     	; 0x98c <Timer0__vInit+0x2c>
 97c:	82 30       	cpi	r24, 0x02	; 2
 97e:	51 f0       	breq	.+20     	; 0x994 <Timer0__vInit+0x34>
 980:	20 c0       	rjmp	.+64     	; 0x9c2 <Timer0__vInit+0x62>
 982:	85 30       	cpi	r24, 0x05	; 5
 984:	81 f0       	breq	.+32     	; 0x9a6 <Timer0__vInit+0x46>
 986:	87 30       	cpi	r24, 0x07	; 7
 988:	a9 f0       	breq	.+42     	; 0x9b4 <Timer0__vInit+0x54>
 98a:	1b c0       	rjmp	.+54     	; 0x9c2 <Timer0__vInit+0x62>
 98c:	84 b5       	in	r24, 0x24	; 36
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	84 bd       	out	0x24, r24	; 36
 992:	17 c0       	rjmp	.+46     	; 0x9c2 <Timer0__vInit+0x62>
 994:	84 b5       	in	r24, 0x24	; 36
 996:	82 60       	ori	r24, 0x02	; 2
 998:	84 bd       	out	0x24, r24	; 36
 99a:	47 bd       	out	0x27, r20	; 39
 99c:	12 c0       	rjmp	.+36     	; 0x9c2 <Timer0__vInit+0x62>
 99e:	84 b5       	in	r24, 0x24	; 36
 9a0:	83 60       	ori	r24, 0x03	; 3
 9a2:	84 bd       	out	0x24, r24	; 36
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <Timer0__vInit+0x62>
 9a6:	84 b5       	in	r24, 0x24	; 36
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	84 bd       	out	0x24, r24	; 36
 9ac:	85 b5       	in	r24, 0x25	; 37
 9ae:	88 60       	ori	r24, 0x08	; 8
 9b0:	85 bd       	out	0x25, r24	; 37
 9b2:	47 bd       	out	0x27, r20	; 39
 9b4:	84 b5       	in	r24, 0x24	; 36
 9b6:	83 60       	ori	r24, 0x03	; 3
 9b8:	84 bd       	out	0x24, r24	; 36
 9ba:	85 b5       	in	r24, 0x25	; 37
 9bc:	88 60       	ori	r24, 0x08	; 8
 9be:	85 bd       	out	0x25, r24	; 37
 9c0:	47 bd       	out	0x27, r20	; 39
 9c2:	16 bc       	out	0x26, r1	; 38
 9c4:	85 b5       	in	r24, 0x25	; 37
 9c6:	67 70       	andi	r22, 0x07	; 7
 9c8:	68 2b       	or	r22, r24
 9ca:	65 bd       	out	0x25, r22	; 37
 9cc:	08 95       	ret

000009ce <Timer0__vEnableInterrupt>:
 9ce:	87 70       	andi	r24, 0x07	; 7
 9d0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 9d4:	08 95       	ret

000009d6 <Timer0__vClearInterrupt>:
}
void Timer0__vClearInterrupt(Timer0_nInterrupt enInterrupt)
{
	TIFR0&=~ ((uint8_t)enInterrupt&0x07);
 9d6:	95 b3       	in	r25, 0x15	; 21
 9d8:	87 70       	andi	r24, 0x07	; 7
 9da:	80 95       	com	r24
 9dc:	98 23       	and	r25, r24
 9de:	95 bb       	out	0x15, r25	; 21
 9e0:	08 95       	ret

000009e2 <OS__u8StartCriticalSection>:
int8_t   OS_ps8Stacks[NUMTHREADS][STACKSIZE];


uint8_t OS__u8StartCriticalSection(void)
{
	uint8_t u8State=SREG&0x80;
 9e2:	8f b7       	in	r24, 0x3f	; 63
	cli();
 9e4:	f8 94       	cli
	return u8State;
}
 9e6:	80 78       	andi	r24, 0x80	; 128
 9e8:	08 95       	ret

000009ea <OS__vEndCriticalSection>:

void OS__vEndCriticalSection(uint8_t u8Status)
{
	SREG|=u8Status;
 9ea:	9f b7       	in	r25, 0x3f	; 63
 9ec:	89 2b       	or	r24, r25
 9ee:	8f bf       	out	0x3f, r24	; 63
 9f0:	08 95       	ret

000009f2 <OS_vSetInitialStack>:
}

void OS_vSetInitialStack(uint8_t i){
	OS_sTCBs[i].sp = &OS_ps8Stacks[i][STACKSIZE-36]; // thread stack pointer
 9f2:	28 2f       	mov	r18, r24
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	f9 01       	movw	r30, r18
 9f8:	ee 0f       	add	r30, r30
 9fa:	ff 1f       	adc	r31, r31
 9fc:	ee 0f       	add	r30, r30
 9fe:	ff 1f       	adc	r31, r31
 a00:	e3 54       	subi	r30, 0x43	; 67
 a02:	f6 4f       	sbci	r31, 0xF6	; 246
 a04:	40 e5       	ldi	r20, 0x50	; 80
 a06:	53 e0       	ldi	r21, 0x03	; 3
 a08:	24 9f       	mul	r18, r20
 a0a:	c0 01       	movw	r24, r0
 a0c:	25 9f       	mul	r18, r21
 a0e:	90 0d       	add	r25, r0
 a10:	34 9f       	mul	r19, r20
 a12:	90 0d       	add	r25, r0
 a14:	11 24       	eor	r1, r1
 a16:	9c 01       	movw	r18, r24
 a18:	2d 5b       	subi	r18, 0xBD	; 189
 a1a:	39 4f       	sbci	r19, 0xF9	; 249
 a1c:	31 83       	std	Z+1, r19	; 0x01
 a1e:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-1] = 0x01; // Thumb bit (PC counter low)
 a20:	89 5e       	subi	r24, 0xE9	; 233
 a22:	9c 4f       	sbci	r25, 0xFC	; 252
 a24:	fc 01       	movw	r30, r24
 a26:	e1 5b       	subi	r30, 0xB1	; 177
 a28:	fc 4f       	sbci	r31, 0xFC	; 252
 a2a:	21 e0       	ldi	r18, 0x01	; 1
 a2c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-2] = 0x02; // Thumb bit (PC counter hight)
 a2e:	31 97       	sbiw	r30, 0x01	; 1
 a30:	22 e0       	ldi	r18, 0x02	; 2
 a32:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-3] = 0x80; // R31
 a34:	31 97       	sbiw	r30, 0x01	; 1
 a36:	20 e8       	ldi	r18, 0x80	; 128
 a38:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-4] = 0x80; // SREG
 a3a:	31 97       	sbiw	r30, 0x01	; 1
 a3c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-5] = 0x05; // R30
 a3e:	31 97       	sbiw	r30, 0x01	; 1
 a40:	25 e0       	ldi	r18, 0x05	; 5
 a42:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-6] = 0x06; // R29
 a44:	31 97       	sbiw	r30, 0x01	; 1
 a46:	26 e0       	ldi	r18, 0x06	; 6
 a48:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-7] = 0x07; // R28
 a4a:	31 97       	sbiw	r30, 0x01	; 1
 a4c:	27 e0       	ldi	r18, 0x07	; 7
 a4e:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-8] = 0x08; // R27
 a50:	31 97       	sbiw	r30, 0x01	; 1
 a52:	28 e0       	ldi	r18, 0x08	; 8
 a54:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-9] = 0x09; // R26
 a56:	31 97       	sbiw	r30, 0x01	; 1
 a58:	29 e0       	ldi	r18, 0x09	; 9
 a5a:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-10] = 0x10; // R25
 a5c:	31 97       	sbiw	r30, 0x01	; 1
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-11] = 0x11; // R24
 a62:	31 97       	sbiw	r30, 0x01	; 1
 a64:	21 e1       	ldi	r18, 0x11	; 17
 a66:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-12] = 0x12; // R23
 a68:	31 97       	sbiw	r30, 0x01	; 1
 a6a:	22 e1       	ldi	r18, 0x12	; 18
 a6c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-13] = 0x13; // R22
 a6e:	31 97       	sbiw	r30, 0x01	; 1
 a70:	23 e1       	ldi	r18, 0x13	; 19
 a72:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-14] = 0x14; // R21
 a74:	31 97       	sbiw	r30, 0x01	; 1
 a76:	24 e1       	ldi	r18, 0x14	; 20
 a78:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-15] = 0x15; // R20
 a7a:	31 97       	sbiw	r30, 0x01	; 1
 a7c:	25 e1       	ldi	r18, 0x15	; 21
 a7e:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-16] = 0x16; // R19
 a80:	31 97       	sbiw	r30, 0x01	; 1
 a82:	26 e1       	ldi	r18, 0x16	; 22
 a84:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-17] = 0x17; // R18
 a86:	31 97       	sbiw	r30, 0x01	; 1
 a88:	27 e1       	ldi	r18, 0x17	; 23
 a8a:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-18] = 0x18; // R17
 a8c:	31 97       	sbiw	r30, 0x01	; 1
 a8e:	28 e1       	ldi	r18, 0x18	; 24
 a90:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-19] = 0x19; // R16
 a92:	31 97       	sbiw	r30, 0x01	; 1
 a94:	29 e1       	ldi	r18, 0x19	; 25
 a96:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-20] = 0x20; // R15
 a98:	31 97       	sbiw	r30, 0x01	; 1
 a9a:	20 e2       	ldi	r18, 0x20	; 32
 a9c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-21] = 0x21; // R14
 a9e:	31 97       	sbiw	r30, 0x01	; 1
 aa0:	21 e2       	ldi	r18, 0x21	; 33
 aa2:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-22] = 0x22; // R13
 aa4:	31 97       	sbiw	r30, 0x01	; 1
 aa6:	22 e2       	ldi	r18, 0x22	; 34
 aa8:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-23] = 0x23; // R12
 aaa:	31 97       	sbiw	r30, 0x01	; 1
 aac:	23 e2       	ldi	r18, 0x23	; 35
 aae:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-24] = 0x24; // R11
 ab0:	31 97       	sbiw	r30, 0x01	; 1
 ab2:	24 e2       	ldi	r18, 0x24	; 36
 ab4:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-25] = 0x25; // R10
 ab6:	31 97       	sbiw	r30, 0x01	; 1
 ab8:	25 e2       	ldi	r18, 0x25	; 37
 aba:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-26] = 0x26; // R09
 abc:	31 97       	sbiw	r30, 0x01	; 1
 abe:	26 e2       	ldi	r18, 0x26	; 38
 ac0:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-27] = 0x27; // R08
 ac2:	31 97       	sbiw	r30, 0x01	; 1
 ac4:	27 e2       	ldi	r18, 0x27	; 39
 ac6:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-28] = 0x28; // R07
 ac8:	31 97       	sbiw	r30, 0x01	; 1
 aca:	28 e2       	ldi	r18, 0x28	; 40
 acc:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-29] = 0x29; // R06
 ace:	31 97       	sbiw	r30, 0x01	; 1
 ad0:	29 e2       	ldi	r18, 0x29	; 41
 ad2:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-30] = 0x30; // R05
 ad4:	31 97       	sbiw	r30, 0x01	; 1
 ad6:	20 e3       	ldi	r18, 0x30	; 48
 ad8:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-31] = 0x31; // R04
 ada:	31 97       	sbiw	r30, 0x01	; 1
 adc:	21 e3       	ldi	r18, 0x31	; 49
 ade:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-32] = 0x32; // R03
 ae0:	31 97       	sbiw	r30, 0x01	; 1
 ae2:	22 e3       	ldi	r18, 0x32	; 50
 ae4:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-33] = 0x33; // R02
 ae6:	31 97       	sbiw	r30, 0x01	; 1
 ae8:	23 e3       	ldi	r18, 0x33	; 51
 aea:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-34] = 0x34; // R01
 aec:	31 97       	sbiw	r30, 0x01	; 1
 aee:	24 e3       	ldi	r18, 0x34	; 52
 af0:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-35] = 0x35; // R00
 af2:	31 97       	sbiw	r30, 0x01	; 1
 af4:	25 e3       	ldi	r18, 0x35	; 53
 af6:	20 83       	st	Z, r18
 af8:	08 95       	ret

00000afa <OS__enAddPeriodicThreads>:
uint16_t OS_u16PeriodTask0=0, OS_u16PeriodTask1=0;
uint32_t OS_u32MaxPeriod=0;
OS_nStatus OS__enAddPeriodicThreads(void(*vPeriodicTask0)(void), 
uint16_t u16PeriodTask0, void(*vPeriodicTask1)(void), uint16_t u16PeriodTask1)
{
	OS_vPeriodicTask0=vPeriodicTask0;
 afa:	90 93 bc 09 	sts	0x09BC, r25	; 0x8009bc <OS_vPeriodicTask0+0x1>
 afe:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <OS_vPeriodicTask0>
	OS_vPeriodicTask1=vPeriodicTask1;
 b02:	50 93 ba 09 	sts	0x09BA, r21	; 0x8009ba <OS_vPeriodicTask1+0x1>
 b06:	40 93 b9 09 	sts	0x09B9, r20	; 0x8009b9 <OS_vPeriodicTask1>
	if(u16PeriodTask0!=0)
 b0a:	61 15       	cp	r22, r1
 b0c:	71 05       	cpc	r23, r1
 b0e:	29 f0       	breq	.+10     	; 0xb1a <__stack+0x1b>
		OS_u16PeriodTask0=u16PeriodTask0;
 b10:	70 93 16 03 	sts	0x0316, r23	; 0x800316 <OS_u16PeriodTask0+0x1>
 b14:	60 93 15 03 	sts	0x0315, r22	; 0x800315 <OS_u16PeriodTask0>
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <__stack+0x27>
	else
		OS_u16PeriodTask0=1;
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <OS_u16PeriodTask0+0x1>
 b22:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <OS_u16PeriodTask0>
	if(u16PeriodTask1!=0)
 b26:	21 15       	cp	r18, r1
 b28:	31 05       	cpc	r19, r1
 b2a:	29 f0       	breq	.+10     	; 0xb36 <__stack+0x37>
		OS_u16PeriodTask1=u16PeriodTask1;
 b2c:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <OS_u16PeriodTask1+0x1>
 b30:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <OS_u16PeriodTask1>
 b34:	06 c0       	rjmp	.+12     	; 0xb42 <__stack+0x43>
	else
		OS_u16PeriodTask1=1;
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <OS_u16PeriodTask1+0x1>
 b3e:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <OS_u16PeriodTask1>
		
	OS_u32MaxPeriod= (OS_u16PeriodTask0*OS_u16PeriodTask1);
 b42:	40 91 15 03 	lds	r20, 0x0315	; 0x800315 <OS_u16PeriodTask0>
 b46:	50 91 16 03 	lds	r21, 0x0316	; 0x800316 <OS_u16PeriodTask0+0x1>
 b4a:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <OS_u16PeriodTask1>
 b4e:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <OS_u16PeriodTask1+0x1>
 b52:	42 9f       	mul	r20, r18
 b54:	c0 01       	movw	r24, r0
 b56:	43 9f       	mul	r20, r19
 b58:	90 0d       	add	r25, r0
 b5a:	52 9f       	mul	r21, r18
 b5c:	90 0d       	add	r25, r0
 b5e:	11 24       	eor	r1, r1
 b60:	a0 e0       	ldi	r26, 0x00	; 0
 b62:	b0 e0       	ldi	r27, 0x00	; 0
 b64:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <OS_u32MaxPeriod>
 b68:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <OS_u32MaxPeriod+0x1>
 b6c:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <OS_u32MaxPeriod+0x2>
 b70:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <OS_u32MaxPeriod+0x3>
	return OS_enOK;
}
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	08 95       	ret

00000b78 <OS__enAddMainThreads>:

OS_nStatus OS__enAddMainThreads(void(*vTask0)(void),
void(*vTask1)(void)){
 b78:	df 92       	push	r13
 b7a:	ef 92       	push	r14
 b7c:	ff 92       	push	r15
 b7e:	0f 93       	push	r16
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
 b86:	d8 2e       	mov	r13, r24
 b88:	e9 2e       	mov	r14, r25
 b8a:	f6 2e       	mov	r15, r22
 b8c:	07 2f       	mov	r16, r23
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
 b8e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OS__u8StartCriticalSection>
 b92:	18 2f       	mov	r17, r24
	OS_sTCBs[0].next = &OS_sTCBs[1]; // 0 points to 1
 b94:	cd eb       	ldi	r28, 0xBD	; 189
 b96:	d9 e0       	ldi	r29, 0x09	; 9
 b98:	81 ec       	ldi	r24, 0xC1	; 193
 b9a:	99 e0       	ldi	r25, 0x09	; 9
 b9c:	9b 83       	std	Y+3, r25	; 0x03
 b9e:	8a 83       	std	Y+2, r24	; 0x02
	OS_sTCBs[1].next = &OS_sTCBs[0]; // 1 points to 2
 ba0:	df 83       	std	Y+7, r29	; 0x07
 ba2:	ce 83       	std	Y+6, r28	; 0x06
	//OS_sTCBs[2].next = &OS_sTCBs[3]; // 2 points to 0
	//OS_sTCBs[3].next = &OS_sTCBs[0]; // 2 points to 0

	OS_vSetInitialStack(0); 
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <OS_vSetInitialStack>
	OS_ps8Stacks[0][STACKSIZE-1] =((int16_t)vTask0)&0xFF; // PC
 baa:	d0 92 66 06 	sts	0x0666, r13	; 0x800666 <OS_ps8Stacks+0x34f>
	OS_ps8Stacks[0][STACKSIZE-2] = (((int16_t)vTask0)>>8)&0xFF; // PC
 bae:	e0 92 65 06 	sts	0x0665, r14	; 0x800665 <OS_ps8Stacks+0x34e>
	OS_vSetInitialStack(1); 
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <OS_vSetInitialStack>
	OS_ps8Stacks[1][STACKSIZE-1] =((int16_t)vTask1)&0xFF; // PC
 bb8:	f0 92 b6 09 	sts	0x09B6, r15	; 0x8009b6 <OS_ps8Stacks+0x69f>
	OS_ps8Stacks[1][STACKSIZE-2] = (((int16_t)vTask1)>>8)&0xFF; // PC
 bbc:	00 93 b5 09 	sts	0x09B5, r16	; 0x8009b5 <OS_ps8Stacks+0x69e>
	OS_ps8Stacks[2][STACKSIZE-2] = (((int16_t)vTask2)>>8)&0xFF; // PC
	OS_vSetInitialStack(3);
	OS_ps8Stacks[3][STACKSIZE-1] =((int16_t)vTask3)&0xFF; // PC
	OS_ps8Stacks[3][STACKSIZE-2] = (((int16_t)vTask3)>>8)&0xFF; // PC
	*/
	OS_psRunPt = &OS_sTCBs[0];        // thread 0 will run first
 bc0:	d0 93 b8 09 	sts	0x09B8, r29	; 0x8009b8 <OS_psRunPt+0x1>
 bc4:	c0 93 b7 09 	sts	0x09B7, r28	; 0x8009b7 <OS_psRunPt>
	OS__vEndCriticalSection(u8Status);
 bc8:	81 2f       	mov	r24, r17
 bca:	0e 94 f5 04 	call	0x9ea	; 0x9ea <OS__vEndCriticalSection>
	return OS_enOK; // successful
}
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	ff 90       	pop	r15
 bda:	ef 90       	pop	r14
 bdc:	df 90       	pop	r13
 bde:	08 95       	ret

00000be0 <OS_vScheduler>:

void OS_vScheduler(void)
{	
	static uint32_t u32Count= 0;
	u32Count%=OS_u32MaxPeriod;
 be0:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <u32Count.1778>
 be4:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <u32Count.1778+0x1>
 be8:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <u32Count.1778+0x2>
 bec:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <u32Count.1778+0x3>
 bf0:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <OS_u32MaxPeriod>
 bf4:	30 91 10 03 	lds	r19, 0x0310	; 0x800310 <OS_u32MaxPeriod+0x1>
 bf8:	40 91 11 03 	lds	r20, 0x0311	; 0x800311 <OS_u32MaxPeriod+0x2>
 bfc:	50 91 12 03 	lds	r21, 0x0312	; 0x800312 <OS_u32MaxPeriod+0x3>
 c00:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
 c04:	60 93 0b 03 	sts	0x030B, r22	; 0x80030b <u32Count.1778>
 c08:	70 93 0c 03 	sts	0x030C, r23	; 0x80030c <u32Count.1778+0x1>
 c0c:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <u32Count.1778+0x2>
 c10:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <u32Count.1778+0x3>
	 if(((uint32_t)u32Count%(uint32_t)OS_u16PeriodTask0) == 0)
 c14:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <OS_u16PeriodTask0>
 c18:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <OS_u16PeriodTask0+0x1>
 c1c:	40 e0       	ldi	r20, 0x00	; 0
 c1e:	50 e0       	ldi	r21, 0x00	; 0
 c20:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
 c24:	67 2b       	or	r22, r23
 c26:	68 2b       	or	r22, r24
 c28:	69 2b       	or	r22, r25
 c2a:	29 f4       	brne	.+10     	; 0xc36 <OS_vScheduler+0x56>
	 { 
		 OS_vPeriodicTask0();
 c2c:	e0 91 bb 09 	lds	r30, 0x09BB	; 0x8009bb <OS_vPeriodicTask0>
 c30:	f0 91 bc 09 	lds	r31, 0x09BC	; 0x8009bc <OS_vPeriodicTask0+0x1>
 c34:	09 95       	icall
	 }
	 if(((uint32_t)u32Count%(uint32_t)OS_u16PeriodTask1) == 0)
 c36:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <OS_u16PeriodTask1>
 c3a:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <OS_u16PeriodTask1+0x1>
 c3e:	40 e0       	ldi	r20, 0x00	; 0
 c40:	50 e0       	ldi	r21, 0x00	; 0
 c42:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <u32Count.1778>
 c46:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <u32Count.1778+0x1>
 c4a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <u32Count.1778+0x2>
 c4e:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <u32Count.1778+0x3>
 c52:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
 c56:	67 2b       	or	r22, r23
 c58:	68 2b       	or	r22, r24
 c5a:	69 2b       	or	r22, r25
 c5c:	29 f4       	brne	.+10     	; 0xc68 <OS_vScheduler+0x88>
	 { 
		 OS_vPeriodicTask1();
 c5e:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <OS_vPeriodicTask1>
 c62:	f0 91 ba 09 	lds	r31, 0x09BA	; 0x8009ba <OS_vPeriodicTask1+0x1>
 c66:	09 95       	icall
	 }	
	u32Count++;
 c68:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <u32Count.1778>
 c6c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <u32Count.1778+0x1>
 c70:	a0 91 0d 03 	lds	r26, 0x030D	; 0x80030d <u32Count.1778+0x2>
 c74:	b0 91 0e 03 	lds	r27, 0x030E	; 0x80030e <u32Count.1778+0x3>
 c78:	01 96       	adiw	r24, 0x01	; 1
 c7a:	a1 1d       	adc	r26, r1
 c7c:	b1 1d       	adc	r27, r1
 c7e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <u32Count.1778>
 c82:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <u32Count.1778+0x1>
 c86:	a0 93 0d 03 	sts	0x030D, r26	; 0x80030d <u32Count.1778+0x2>
 c8a:	b0 93 0e 03 	sts	0x030E, r27	; 0x80030e <u32Count.1778+0x3>
	OS_psRunPt = OS_psRunPt->next; // Round Robin scheduler
 c8e:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OS_psRunPt>
 c92:	f0 91 b8 09 	lds	r31, 0x09B8	; 0x8009b8 <OS_psRunPt+0x1>
 c96:	82 81       	ldd	r24, Z+2	; 0x02
 c98:	93 81       	ldd	r25, Z+3	; 0x03
 c9a:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <OS_psRunPt+0x1>
 c9e:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OS_psRunPt>
 ca2:	08 95       	ret

00000ca4 <OS__vInitSemaphore>:

/* SpinLock semaphore*/

void OS__vInitSemaphore(int8_t *ps8Semaphore, SEMAPHORE_nTypeInit enInitValue)
{
	*ps8Semaphore=(int8_t)enInitValue;
 ca4:	fc 01       	movw	r30, r24
 ca6:	60 83       	st	Z, r22
 ca8:	08 95       	ret

00000caa <OS__vWaitSemaphore>:
}

void OS__vWaitSemaphore(int8_t *ps8Semaphore)
{
 caa:	cf 93       	push	r28
 cac:	df 93       	push	r29
 cae:	ec 01       	movw	r28, r24
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
 cb0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OS__u8StartCriticalSection>
	/*Wait until data are available*/
	while(*ps8Semaphore == 0){
 cb4:	98 81       	ld	r25, Y
 cb6:	91 11       	cpse	r25, r1
 cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <OS__vWaitSemaphore+0x1a>
	sei(); /* interrupts can occur here*/
 cba:	78 94       	sei
	cli();
 cbc:	f8 94       	cli
void OS__vWaitSemaphore(int8_t *ps8Semaphore)
{
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
	/*Wait until data are available*/
	while(*ps8Semaphore == 0){
 cbe:	98 81       	ld	r25, Y
 cc0:	99 23       	and	r25, r25
 cc2:	d9 f3       	breq	.-10     	; 0xcba <OS__vWaitSemaphore+0x10>
	sei(); /* interrupts can occur here*/
	cli();
	}
	*ps8Semaphore = (*ps8Semaphore) - 1;
 cc4:	91 50       	subi	r25, 0x01	; 1
 cc6:	98 83       	st	Y, r25
	OS__vEndCriticalSection(u8Status);
 cc8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <OS__vEndCriticalSection>
} 
 ccc:	df 91       	pop	r29
 cce:	cf 91       	pop	r28
 cd0:	08 95       	ret

00000cd2 <OS__vSignalSemaphore>:

void OS__vSignalSemaphore(int8_t *ps8Semaphore)
{
 cd2:	cf 93       	push	r28
 cd4:	df 93       	push	r29
 cd6:	ec 01       	movw	r28, r24
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
 cd8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OS__u8StartCriticalSection>
	*ps8Semaphore = (*ps8Semaphore) + 1;
 cdc:	98 81       	ld	r25, Y
 cde:	9f 5f       	subi	r25, 0xFF	; 255
 ce0:	98 83       	st	Y, r25
	OS__vEndCriticalSection(u8Status);
 ce2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <OS__vEndCriticalSection>
}
 ce6:	df 91       	pop	r29
 ce8:	cf 91       	pop	r28
 cea:	08 95       	ret

00000cec <OS_vStartOS>:
	OS_vStartOS();                   // start on the first task
}

void OS_vStartOS(void)
{
	asm volatile (
 cec:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OS_psRunPt>
 cf0:	f0 91 b8 09 	lds	r31, 0x09B8	; 0x8009b8 <OS_psRunPt+0x1>
 cf4:	01 90       	ld	r0, Z+
 cf6:	10 80       	ld	r1, Z
 cf8:	0d be       	out	0x3d, r0	; 61
 cfa:	1e be       	out	0x3e, r1	; 62
 cfc:	0f 90       	pop	r0
 cfe:	1f 90       	pop	r1
 d00:	2f 90       	pop	r2
 d02:	3f 90       	pop	r3
 d04:	4f 90       	pop	r4
 d06:	5f 90       	pop	r5
 d08:	6f 90       	pop	r6
 d0a:	7f 90       	pop	r7
 d0c:	8f 90       	pop	r8
 d0e:	9f 90       	pop	r9
 d10:	af 90       	pop	r10
 d12:	bf 90       	pop	r11
 d14:	cf 90       	pop	r12
 d16:	df 90       	pop	r13
 d18:	ef 90       	pop	r14
 d1a:	ff 90       	pop	r15
 d1c:	0f 91       	pop	r16
 d1e:	1f 91       	pop	r17
 d20:	2f 91       	pop	r18
 d22:	3f 91       	pop	r19
 d24:	4f 91       	pop	r20
 d26:	5f 91       	pop	r21
 d28:	6f 91       	pop	r22
 d2a:	7f 91       	pop	r23
 d2c:	8f 91       	pop	r24
 d2e:	9f 91       	pop	r25
 d30:	af 91       	pop	r26
 d32:	bf 91       	pop	r27
 d34:	cf 91       	pop	r28
 d36:	df 91       	pop	r29
 d38:	ef 91       	pop	r30
 d3a:	ff 91       	pop	r31
 d3c:	ff bf       	out	0x3f, r31	; 63
 d3e:	ff 91       	pop	r31
 d40:	08 95       	ret

00000d42 <OS__vLaunch>:


void OS__vLaunch(void){

	/*Clear pending Interrupt of Timer Overflow*/
	Timer0__vClearInterrupt(Timer0_enInterruptOCIEA);
 d42:	82 e0       	ldi	r24, 0x02	; 2
 d44:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Timer0__vClearInterrupt>
	/*Enable Interrupt of Timer Overflow*/
	Timer0__vEnableInterrupt(Timer0_enInterruptOCIEA);
 d48:	82 e0       	ldi	r24, 0x02	; 2
 d4a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <Timer0__vEnableInterrupt>
	
	/*Intialization of Timer: Normal Mode MAX and CLK div64 ~~ 1ms*/
	Timer0__vInit(Timer0_enModeNormal_OCRA,Timer0_enClockDiv64,251);
 d4e:	4b ef       	ldi	r20, 0xFB	; 251
 d50:	63 e0       	ldi	r22, 0x03	; 3
 d52:	82 e0       	ldi	r24, 0x02	; 2
 d54:	0e 94 b0 04 	call	0x960	; 0x960 <Timer0__vInit>

	OS_vStartOS();                   // start on the first task
 d58:	0e 94 76 06 	call	0xcec	; 0xcec <OS_vStartOS>
 d5c:	08 95       	ret

00000d5e <__vector_21>:


// Task switching, ISR_NAKED is necessary to prevent compiler to manipulate the stack
ISR(TIMER0_COMPA_vect, ISR_NAKED) //1) Saves PC
{
	asm volatile (
 d5e:	ff 93       	push	r31
 d60:	ff b7       	in	r31, 0x3f	; 63
 d62:	ff 93       	push	r31
 d64:	ef 93       	push	r30
 d66:	df 93       	push	r29
 d68:	cf 93       	push	r28
 d6a:	bf 93       	push	r27
 d6c:	af 93       	push	r26
 d6e:	9f 93       	push	r25
 d70:	8f 93       	push	r24
 d72:	7f 93       	push	r23
 d74:	6f 93       	push	r22
 d76:	5f 93       	push	r21
 d78:	4f 93       	push	r20
 d7a:	3f 93       	push	r19
 d7c:	2f 93       	push	r18
 d7e:	1f 93       	push	r17
 d80:	0f 93       	push	r16
 d82:	ff 92       	push	r15
 d84:	ef 92       	push	r14
 d86:	df 92       	push	r13
 d88:	cf 92       	push	r12
 d8a:	bf 92       	push	r11
 d8c:	af 92       	push	r10
 d8e:	9f 92       	push	r9
 d90:	8f 92       	push	r8
 d92:	7f 92       	push	r7
 d94:	6f 92       	push	r6
 d96:	5f 92       	push	r5
 d98:	4f 92       	push	r4
 d9a:	3f 92       	push	r3
 d9c:	2f 92       	push	r2
 d9e:	1f 92       	push	r1
 da0:	0f 92       	push	r0
 da2:	0d b6       	in	r0, 0x3d	; 61
 da4:	1e b6       	in	r1, 0x3e	; 62
 da6:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OS_psRunPt>
 daa:	f0 91 b8 09 	lds	r31, 0x09B8	; 0x8009b8 <OS_psRunPt+0x1>
 dae:	01 92       	st	Z+, r0
 db0:	10 82       	st	Z, r1
 db2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OS_vScheduler>
 db6:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OS_psRunPt>
 dba:	f0 91 b8 09 	lds	r31, 0x09B8	; 0x8009b8 <OS_psRunPt+0x1>
 dbe:	01 90       	ld	r0, Z+
 dc0:	10 80       	ld	r1, Z
 dc2:	0d be       	out	0x3d, r0	; 61
 dc4:	1e be       	out	0x3e, r1	; 62
 dc6:	0f 90       	pop	r0
 dc8:	1f 90       	pop	r1
 dca:	2f 90       	pop	r2
 dcc:	3f 90       	pop	r3
 dce:	4f 90       	pop	r4
 dd0:	5f 90       	pop	r5
 dd2:	6f 90       	pop	r6
 dd4:	7f 90       	pop	r7
 dd6:	8f 90       	pop	r8
 dd8:	9f 90       	pop	r9
 dda:	af 90       	pop	r10
 ddc:	bf 90       	pop	r11
 dde:	cf 90       	pop	r12
 de0:	df 90       	pop	r13
 de2:	ef 90       	pop	r14
 de4:	ff 90       	pop	r15
 de6:	0f 91       	pop	r16
 de8:	1f 91       	pop	r17
 dea:	2f 91       	pop	r18
 dec:	3f 91       	pop	r19
 dee:	4f 91       	pop	r20
 df0:	5f 91       	pop	r21
 df2:	6f 91       	pop	r22
 df4:	7f 91       	pop	r23
 df6:	8f 91       	pop	r24
 df8:	9f 91       	pop	r25
 dfa:	af 91       	pop	r26
 dfc:	bf 91       	pop	r27
 dfe:	cf 91       	pop	r28
 e00:	df 91       	pop	r29
 e02:	ef 91       	pop	r30
 e04:	ff 91       	pop	r31
 e06:	ff bf       	out	0x3f, r31	; 63
 e08:	ff 91       	pop	r31
 e0a:	18 95       	reti

00000e0c <__udivmodsi4>:
 e0c:	a1 e2       	ldi	r26, 0x21	; 33
 e0e:	1a 2e       	mov	r1, r26
 e10:	aa 1b       	sub	r26, r26
 e12:	bb 1b       	sub	r27, r27
 e14:	fd 01       	movw	r30, r26
 e16:	0d c0       	rjmp	.+26     	; 0xe32 <__udivmodsi4_ep>

00000e18 <__udivmodsi4_loop>:
 e18:	aa 1f       	adc	r26, r26
 e1a:	bb 1f       	adc	r27, r27
 e1c:	ee 1f       	adc	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	a2 17       	cp	r26, r18
 e22:	b3 07       	cpc	r27, r19
 e24:	e4 07       	cpc	r30, r20
 e26:	f5 07       	cpc	r31, r21
 e28:	20 f0       	brcs	.+8      	; 0xe32 <__udivmodsi4_ep>
 e2a:	a2 1b       	sub	r26, r18
 e2c:	b3 0b       	sbc	r27, r19
 e2e:	e4 0b       	sbc	r30, r20
 e30:	f5 0b       	sbc	r31, r21

00000e32 <__udivmodsi4_ep>:
 e32:	66 1f       	adc	r22, r22
 e34:	77 1f       	adc	r23, r23
 e36:	88 1f       	adc	r24, r24
 e38:	99 1f       	adc	r25, r25
 e3a:	1a 94       	dec	r1
 e3c:	69 f7       	brne	.-38     	; 0xe18 <__udivmodsi4_loop>
 e3e:	60 95       	com	r22
 e40:	70 95       	com	r23
 e42:	80 95       	com	r24
 e44:	90 95       	com	r25
 e46:	9b 01       	movw	r18, r22
 e48:	ac 01       	movw	r20, r24
 e4a:	bd 01       	movw	r22, r26
 e4c:	cf 01       	movw	r24, r30
 e4e:	08 95       	ret

00000e50 <__tablejump2__>:
 e50:	ee 0f       	add	r30, r30
 e52:	ff 1f       	adc	r31, r31
 e54:	05 90       	lpm	r0, Z+
 e56:	f4 91       	lpm	r31, Z
 e58:	e0 2d       	mov	r30, r0
 e5a:	09 94       	ijmp

00000e5c <__umoddi3>:
 e5c:	68 94       	set
 e5e:	01 c0       	rjmp	.+2      	; 0xe62 <__udivdi3_umoddi3>

00000e60 <__udivdi3>:
 e60:	e8 94       	clt

00000e62 <__udivdi3_umoddi3>:
 e62:	8f 92       	push	r8
 e64:	9f 92       	push	r9
 e66:	cf 93       	push	r28
 e68:	df 93       	push	r29
 e6a:	0e 94 3c 07 	call	0xe78	; 0xe78 <__udivmod64>
 e6e:	df 91       	pop	r29
 e70:	cf 91       	pop	r28
 e72:	9f 90       	pop	r9
 e74:	8f 90       	pop	r8
 e76:	08 95       	ret

00000e78 <__udivmod64>:
 e78:	88 24       	eor	r8, r8
 e7a:	99 24       	eor	r9, r9
 e7c:	f4 01       	movw	r30, r8
 e7e:	e4 01       	movw	r28, r8
 e80:	b0 e4       	ldi	r27, 0x40	; 64
 e82:	9f 93       	push	r25
 e84:	aa 27       	eor	r26, r26
 e86:	9a 15       	cp	r25, r10
 e88:	8b 04       	cpc	r8, r11
 e8a:	9c 04       	cpc	r9, r12
 e8c:	ed 05       	cpc	r30, r13
 e8e:	fe 05       	cpc	r31, r14
 e90:	cf 05       	cpc	r28, r15
 e92:	d0 07       	cpc	r29, r16
 e94:	a1 07       	cpc	r26, r17
 e96:	98 f4       	brcc	.+38     	; 0xebe <__udivmod64+0x46>
 e98:	ad 2f       	mov	r26, r29
 e9a:	dc 2f       	mov	r29, r28
 e9c:	cf 2f       	mov	r28, r31
 e9e:	fe 2f       	mov	r31, r30
 ea0:	e9 2d       	mov	r30, r9
 ea2:	98 2c       	mov	r9, r8
 ea4:	89 2e       	mov	r8, r25
 ea6:	98 2f       	mov	r25, r24
 ea8:	87 2f       	mov	r24, r23
 eaa:	76 2f       	mov	r23, r22
 eac:	65 2f       	mov	r22, r21
 eae:	54 2f       	mov	r21, r20
 eb0:	43 2f       	mov	r20, r19
 eb2:	32 2f       	mov	r19, r18
 eb4:	22 27       	eor	r18, r18
 eb6:	b8 50       	subi	r27, 0x08	; 8
 eb8:	31 f7       	brne	.-52     	; 0xe86 <__udivmod64+0xe>
 eba:	bf 91       	pop	r27
 ebc:	27 c0       	rjmp	.+78     	; 0xf0c <__udivmod64+0x94>
 ebe:	1b 2e       	mov	r1, r27
 ec0:	bf 91       	pop	r27
 ec2:	bb 27       	eor	r27, r27
 ec4:	22 0f       	add	r18, r18
 ec6:	33 1f       	adc	r19, r19
 ec8:	44 1f       	adc	r20, r20
 eca:	55 1f       	adc	r21, r21
 ecc:	66 1f       	adc	r22, r22
 ece:	77 1f       	adc	r23, r23
 ed0:	88 1f       	adc	r24, r24
 ed2:	99 1f       	adc	r25, r25
 ed4:	88 1c       	adc	r8, r8
 ed6:	99 1c       	adc	r9, r9
 ed8:	ee 1f       	adc	r30, r30
 eda:	ff 1f       	adc	r31, r31
 edc:	cc 1f       	adc	r28, r28
 ede:	dd 1f       	adc	r29, r29
 ee0:	aa 1f       	adc	r26, r26
 ee2:	bb 1f       	adc	r27, r27
 ee4:	8a 14       	cp	r8, r10
 ee6:	9b 04       	cpc	r9, r11
 ee8:	ec 05       	cpc	r30, r12
 eea:	fd 05       	cpc	r31, r13
 eec:	ce 05       	cpc	r28, r14
 eee:	df 05       	cpc	r29, r15
 ef0:	a0 07       	cpc	r26, r16
 ef2:	b1 07       	cpc	r27, r17
 ef4:	48 f0       	brcs	.+18     	; 0xf08 <__udivmod64+0x90>
 ef6:	8a 18       	sub	r8, r10
 ef8:	9b 08       	sbc	r9, r11
 efa:	ec 09       	sbc	r30, r12
 efc:	fd 09       	sbc	r31, r13
 efe:	ce 09       	sbc	r28, r14
 f00:	df 09       	sbc	r29, r15
 f02:	a0 0b       	sbc	r26, r16
 f04:	b1 0b       	sbc	r27, r17
 f06:	21 60       	ori	r18, 0x01	; 1
 f08:	1a 94       	dec	r1
 f0a:	e1 f6       	brne	.-72     	; 0xec4 <__udivmod64+0x4c>
 f0c:	2e f4       	brtc	.+10     	; 0xf18 <__udivmod64+0xa0>
 f0e:	94 01       	movw	r18, r8
 f10:	af 01       	movw	r20, r30
 f12:	be 01       	movw	r22, r28
 f14:	cd 01       	movw	r24, r26
 f16:	00 0c       	add	r0, r0
 f18:	08 95       	ret

00000f1a <__cmpdi2_s8>:
 f1a:	00 24       	eor	r0, r0
 f1c:	a7 fd       	sbrc	r26, 7
 f1e:	00 94       	com	r0
 f20:	2a 17       	cp	r18, r26
 f22:	30 05       	cpc	r19, r0
 f24:	40 05       	cpc	r20, r0
 f26:	50 05       	cpc	r21, r0
 f28:	60 05       	cpc	r22, r0
 f2a:	70 05       	cpc	r23, r0
 f2c:	80 05       	cpc	r24, r0
 f2e:	90 05       	cpc	r25, r0
 f30:	08 95       	ret

00000f32 <_exit>:
 f32:	f8 94       	cli

00000f34 <__stop_program>:
 f34:	ff cf       	rjmp	.-2      	; 0xf34 <__stop_program>
