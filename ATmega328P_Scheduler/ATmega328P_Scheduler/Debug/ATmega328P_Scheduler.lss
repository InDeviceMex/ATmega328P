
ATmega328P_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00000ae0  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006be  008002e6  008002e6  00000d5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bb9  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001368  00000000  00000000  00004cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a57  00000000  00000000  00006045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d38  00000000  00000000  00008a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016c3  00000000  00000000  000097d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057dc  00000000  00000000  0000ae97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00010673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	12 e0       	ldi	r17, 0x02	; 2
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 ee       	ldi	r30, 0xE0	; 224
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 3e       	cpi	r26, 0xE6	; 230
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	29 e0       	ldi	r18, 0x09	; 9
  d0:	a6 ee       	ldi	r26, 0xE6	; 230
  d2:	b2 e0       	ldi	r27, 0x02	; 2
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 3a       	cpi	r26, 0xA4	; 164
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  e2:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <CONV__u8UIntToString>:
    return s64NumberReg;

}

uint8_t CONV__u8UIntToString(uint64_t u64Number, char* pcConv)
{
  ea:	6f 92       	push	r6
  ec:	7f 92       	push	r7
  ee:	8f 92       	push	r8
  f0:	9f 92       	push	r9
  f2:	af 92       	push	r10
  f4:	bf 92       	push	r11
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	a2 97       	sbiw	r28, 0x22	; 34
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	38 01       	movw	r6, r16
    volatile char 		pcConvTemp[INT2STRINGMAX]={0}; //longitud maxima de long 12 digitos con signo
 118:	8e 01       	movw	r16, r28
 11a:	0f 5f       	subi	r16, 0xFF	; 255
 11c:	1f 4f       	sbci	r17, 0xFF	; 255
 11e:	a5 e1       	ldi	r26, 0x15	; 21
 120:	f8 01       	movw	r30, r16
 122:	11 92       	st	Z+, r1
 124:	aa 95       	dec	r26
 126:	e9 f7       	brne	.-6      	; 0x122 <CONV__u8UIntToString+0x38>
    volatile char 		*pcPointerActual = &pcConvTemp[INT2STRINGMAX - 1]; //empezamos llenando desde la ultima posicion
    volatile int32_t 	s32Num=0;
 128:	1e 8a       	std	Y+22, r1	; 0x16
 12a:	1f 8a       	std	Y+23, r1	; 0x17
 12c:	18 8e       	std	Y+24, r1	; 0x18
 12e:	19 8e       	std	Y+25, r1	; 0x19
    volatile int8_t 		s8I=0;
 130:	1a 8e       	std	Y+26, r1	; 0x1a
    volatile uint64_t 	u64NumberReg = u64Number;//paso el s32Numero a un registro para aumentar rendimiento
 132:	2b 8f       	std	Y+27, r18	; 0x1b
 134:	3c 8f       	std	Y+28, r19	; 0x1c
 136:	4d 8f       	std	Y+29, r20	; 0x1d
 138:	5e 8f       	std	Y+30, r21	; 0x1e
 13a:	6f 8f       	std	Y+31, r22	; 0x1f
 13c:	78 a3       	std	Y+32, r23	; 0x20
 13e:	89 a3       	std	Y+33, r24	; 0x21
 140:	9a a3       	std	Y+34, r25	; 0x22

    *pcPointerActual = 0; //guarda el fin de cadena en la ultima posicion
 142:	1d 8a       	std	Y+21, r1	; 0x15
}

uint8_t CONV__u8UIntToString(uint64_t u64Number, char* pcConv)
{
    volatile char 		pcConvTemp[INT2STRINGMAX]={0}; //longitud maxima de long 12 digitos con signo
    volatile char 		*pcPointerActual = &pcConvTemp[INT2STRINGMAX - 1]; //empezamos llenando desde la ultima posicion
 144:	4e 01       	movw	r8, r28
 146:	f5 e1       	ldi	r31, 0x15	; 21
 148:	8f 0e       	add	r8, r31
 14a:	91 1c       	adc	r9, r1
    volatile uint64_t 	u64NumberReg = u64Number;//paso el s32Numero a un registro para aumentar rendimiento

    *pcPointerActual = 0; //guarda el fin de cadena en la ultima posicion
    do {
        pcPointerActual--;//se decrementa la posicion donse guardara el valor
        s32Num=(uint64_t)u64NumberReg % (uint64_t)10ul; //obtiene el digito de menor peso
 14c:	2b 8d       	ldd	r18, Y+27	; 0x1b
 14e:	3c 8d       	ldd	r19, Y+28	; 0x1c
 150:	4d 8d       	ldd	r20, Y+29	; 0x1d
 152:	5e 8d       	ldd	r21, Y+30	; 0x1e
 154:	6f 8d       	ldd	r22, Y+31	; 0x1f
 156:	78 a1       	ldd	r23, Y+32	; 0x20
 158:	89 a1       	ldd	r24, Y+33	; 0x21
 15a:	9a a1       	ldd	r25, Y+34	; 0x22
 15c:	0f 2e       	mov	r0, r31
 15e:	fa e0       	ldi	r31, 0x0A	; 10
 160:	af 2e       	mov	r10, r31
 162:	f0 2d       	mov	r31, r0
 164:	b1 2c       	mov	r11, r1
 166:	c1 2c       	mov	r12, r1
 168:	d1 2c       	mov	r13, r1
 16a:	e1 2c       	mov	r14, r1
 16c:	f1 2c       	mov	r15, r1
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	0e 94 03 05 	call	0xa06	; 0xa06 <__umoddi3>
 176:	82 2f       	mov	r24, r18
 178:	93 2f       	mov	r25, r19
 17a:	a4 2f       	mov	r26, r20
 17c:	b5 2f       	mov	r27, r21
 17e:	8e 8b       	std	Y+22, r24	; 0x16
 180:	9f 8b       	std	Y+23, r25	; 0x17
 182:	a8 8f       	std	Y+24, r26	; 0x18
 184:	b9 8f       	std	Y+25, r27	; 0x19
        *pcPointerActual = (uint8_t)s32Num  + '0'; //pcConvierte el valor en caracter
 186:	8e 89       	ldd	r24, Y+22	; 0x16
 188:	9f 89       	ldd	r25, Y+23	; 0x17
 18a:	a8 8d       	ldd	r26, Y+24	; 0x18
 18c:	b9 8d       	ldd	r27, Y+25	; 0x19
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	f4 01       	movw	r30, r8
 192:	82 93       	st	-Z, r24
 194:	4f 01       	movw	r8, r30
    }  while((u64NumberReg /= (uint64_t)10ul)); //mientras exista un digito sigue el ciclo
 196:	2b 8d       	ldd	r18, Y+27	; 0x1b
 198:	3c 8d       	ldd	r19, Y+28	; 0x1c
 19a:	4d 8d       	ldd	r20, Y+29	; 0x1d
 19c:	5e 8d       	ldd	r21, Y+30	; 0x1e
 19e:	6f 8d       	ldd	r22, Y+31	; 0x1f
 1a0:	78 a1       	ldd	r23, Y+32	; 0x20
 1a2:	89 a1       	ldd	r24, Y+33	; 0x21
 1a4:	9a a1       	ldd	r25, Y+34	; 0x22
 1a6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivdi3>
 1aa:	2b 8f       	std	Y+27, r18	; 0x1b
 1ac:	3c 8f       	std	Y+28, r19	; 0x1c
 1ae:	4d 8f       	std	Y+29, r20	; 0x1d
 1b0:	5e 8f       	std	Y+30, r21	; 0x1e
 1b2:	6f 8f       	std	Y+31, r22	; 0x1f
 1b4:	78 a3       	std	Y+32, r23	; 0x20
 1b6:	89 a3       	std	Y+33, r24	; 0x21
 1b8:	9a a3       	std	Y+34, r25	; 0x22
 1ba:	a0 e0       	ldi	r26, 0x00	; 0
 1bc:	0e 94 62 05 	call	0xac4	; 0xac4 <__cmpdi2_s8>
 1c0:	29 f6       	brne	.-118    	; 0x14c <CONV__u8UIntToString+0x62>

    u64NumberReg=pcConvTemp+INT2STRINGMAX-1-pcPointerActual;//realiza la resta de cuantos caracteres se utilizaron
 1c2:	9e 01       	movw	r18, r28
 1c4:	2b 5e       	subi	r18, 0xEB	; 235
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	28 19       	sub	r18, r8
 1ca:	39 09       	sbc	r19, r9
 1cc:	83 2f       	mov	r24, r19
 1ce:	88 0f       	add	r24, r24
 1d0:	88 0b       	sbc	r24, r24
 1d2:	2b 8f       	std	Y+27, r18	; 0x1b
 1d4:	3c 8f       	std	Y+28, r19	; 0x1c
 1d6:	8d 8f       	std	Y+29, r24	; 0x1d
 1d8:	8e 8f       	std	Y+30, r24	; 0x1e
 1da:	8f 8f       	std	Y+31, r24	; 0x1f
 1dc:	88 a3       	std	Y+32, r24	; 0x20
 1de:	89 a3       	std	Y+33, r24	; 0x21
 1e0:	8a a3       	std	Y+34, r24	; 0x22
    for (s8I = (int8_t)u64NumberReg; s8I>=0; s8I--) //hace un ciclo burbuja optimizado
 1e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
 1e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
 1ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
 1ec:	98 a1       	ldd	r25, Y+32	; 0x20
 1ee:	99 a1       	ldd	r25, Y+33	; 0x21
 1f0:	9a a1       	ldd	r25, Y+34	; 0x22
 1f2:	8a 8f       	std	Y+26, r24	; 0x1a
 1f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
 1f6:	88 23       	and	r24, r24
 1f8:	84 f0       	brlt	.+32     	; 0x21a <CONV__u8UIntToString+0x130>
    {
        ((char *)pcConv)[(uint8_t)s8I] = ((char *)pcPointerActual)[(uint8_t)s8I];
 1fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
 1fe:	f3 01       	movw	r30, r6
 200:	e9 0f       	add	r30, r25
 202:	f1 1d       	adc	r31, r1
 204:	d4 01       	movw	r26, r8
 206:	a8 0f       	add	r26, r24
 208:	b1 1d       	adc	r27, r1
 20a:	8c 91       	ld	r24, X
 20c:	80 83       	st	Z, r24
        s32Num=(uint64_t)u64NumberReg % (uint64_t)10ul; //obtiene el digito de menor peso
        *pcPointerActual = (uint8_t)s32Num  + '0'; //pcConvierte el valor en caracter
    }  while((u64NumberReg /= (uint64_t)10ul)); //mientras exista un digito sigue el ciclo

    u64NumberReg=pcConvTemp+INT2STRINGMAX-1-pcPointerActual;//realiza la resta de cuantos caracteres se utilizaron
    for (s8I = (int8_t)u64NumberReg; s8I>=0; s8I--) //hace un ciclo burbuja optimizado
 20e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 210:	81 50       	subi	r24, 0x01	; 1
 212:	8a 8f       	std	Y+26, r24	; 0x1a
 214:	8a 8d       	ldd	r24, Y+26	; 0x1a
 216:	88 23       	and	r24, r24
 218:	84 f7       	brge	.-32     	; 0x1fa <CONV__u8UIntToString+0x110>
    {
        ((char *)pcConv)[(uint8_t)s8I] = ((char *)pcPointerActual)[(uint8_t)s8I];
    }

    return u64NumberReg;
 21a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 21c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 21e:	9d 8d       	ldd	r25, Y+29	; 0x1d
 220:	9e 8d       	ldd	r25, Y+30	; 0x1e
 222:	9f 8d       	ldd	r25, Y+31	; 0x1f
 224:	98 a1       	ldd	r25, Y+32	; 0x20
 226:	99 a1       	ldd	r25, Y+33	; 0x21
 228:	9a a1       	ldd	r25, Y+34	; 0x22
}
 22a:	a2 96       	adiw	r28, 0x22	; 34
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	8f 90       	pop	r8
 24e:	7f 90       	pop	r7
 250:	6f 90       	pop	r6
 252:	08 95       	ret

00000254 <Task5>:
}
void Task5 (void)
{	
	static uint8_t u8Previous=PBUTTON2_READPIN;
	static uint8_t u8Actual=PBUTTON2_READPIN;
	u8Actual=PBUTTON2_READPORT & PBUTTON2_READPIN;
 254:	89 b1       	in	r24, 0x09	; 9
 256:	81 70       	andi	r24, 0x01	; 1
 258:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <u8Actual.2139>
	
	LEDAMBER_OUT|=LEDAMBER_PIN;
 25c:	8e 9a       	sbi	0x11, 6	; 17
	if(u8Previous!=u8Actual)
 25e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8Actual.2139>
 262:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <u8Previous.2138>
 266:	98 17       	cp	r25, r24
 268:	19 f0       	breq	.+6      	; 0x270 <Task5+0x1c>
	{
		if(u8Actual==0)
 26a:	81 11       	cpse	r24, r1
 26c:	01 c0       	rjmp	.+2      	; 0x270 <Task5+0x1c>
		{
			LEDAMBER_OUT&=~LEDAMBER_PIN;
 26e:	8e 98       	cbi	0x11, 6	; 17
			//MAIN_u8CountBUTTON2++;
		}
		
	}
	u8Previous=u8Actual;
 270:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u8Actual.2139>
 274:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <u8Previous.2138>
 278:	08 95       	ret

0000027a <Task6>:
} 
void Task6 (void)
{
	static uint8_t u8Previous=PBUTTON1_READPIN;
	static uint8_t u8Actual=PBUTTON1_READPIN;
	u8Actual=PBUTTON1_READPORT & PBUTTON1_READPIN;
 27a:	89 b1       	in	r24, 0x09	; 9
 27c:	80 71       	andi	r24, 0x10	; 16
 27e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <u8Actual.2144>
	
	LEDBLUE_OUT|=LEDBLUE_PIN;
 282:	8d 9a       	sbi	0x11, 5	; 17
	if(u8Previous!=u8Actual)
 284:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Actual.2144>
 288:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 28c:	98 17       	cp	r25, r24
 28e:	41 f0       	breq	.+16     	; 0x2a0 <Task6+0x26>
	{
		if(u8Actual==0)
 290:	81 11       	cpse	r24, r1
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <Task6+0x26>
		{
			LEDBLUE_OUT&=~LEDBLUE_PIN;
 294:	8d 98       	cbi	0x11, 5	; 17
			MAIN_u8CountBUTTON1++;
 296:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__data_end>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__data_end>
		}
		
	}
	u8Previous=u8Actual;
 2a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <u8Actual.2144>
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a8:	08 95       	ret

000002aa <Task1>:
	uint16_t u16ValueBoton=0;
	uint16_t i=0;

	while(1)
	{
		u8Status=OS__u8StartCriticalSection();
 2aa:	0e 94 c8 02 	call	0x590	; 0x590 <OS__u8StartCriticalSection>
		u16ValueBoton=MAIN_u8CountBUTTON1;
		OS__vEndCriticalSection(u8Status);
 2ae:	0e 94 cc 02 	call	0x598	; 0x598 <OS__vEndCriticalSection>
		u8Column=9;
		u8Row=1;
		//CONV__u8UIntToString(10,&TASK1_cConv[0]);
		OS__vWaitSemaphore(&MAIN_s8SemaphoreSPI);
 2b2:	87 ee       	ldi	r24, 0xE7	; 231
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	0e 94 2d 04 	call	0x85a	; 0x85a <OS__vWaitSemaphore>
		//NOKIA5110__u8SendString((char*)TASK1_cConv,&u8Column,&u8Row);
		LEDGREEN_OUT^=LEDGREEN_PIN;
 2ba:	81 b3       	in	r24, 0x11	; 17
 2bc:	80 58       	subi	r24, 0x80	; 128
 2be:	81 bb       	out	0x11, r24	; 17
		OS__vSignalSemaphore(&MAIN_s8SemaphoreSPI);
 2c0:	87 ee       	ldi	r24, 0xE7	; 231
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	0e 94 41 04 	call	0x882	; 0x882 <OS__vSignalSemaphore>
 2c8:	80 e5       	ldi	r24, 0x50	; 80
 2ca:	93 ec       	ldi	r25, 0xC3	; 195
 2cc:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<50000ul;i++);
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <Task1+0x22>
 2d0:	80 e5       	ldi	r24, 0x50	; 80
 2d2:	93 ec       	ldi	r25, 0xC3	; 195
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<50000ul;i++);
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <Task1+0x2a>
 2d8:	e8 cf       	rjmp	.-48     	; 0x2aa <Task1>

000002da <Task2>:
		
	}
}

void Task2 (void)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	2a 97       	sbiw	r28, 0x0a	; 10
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
	uint16_t u16ValueBoton=0;
	uint16_t i=0;

	while(1)
	{
		u8Status=OS__u8StartCriticalSection();
 2ee:	0e 94 c8 02 	call	0x590	; 0x590 <OS__u8StartCriticalSection>
		u16ValueBoton=MAIN_u8CountBUTTON2;
		OS__vEndCriticalSection(u8Status);
 2f2:	0e 94 cc 02 	call	0x598	; 0x598 <OS__vEndCriticalSection>
		u8Column=9;
		u8Row=2;
		CONV__u8UIntToString(10,&TASK1_cConv[0]);
 2f6:	8e 01       	movw	r16, r28
 2f8:	0f 5f       	subi	r16, 0xFF	; 255
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
 2fc:	2a e0       	ldi	r18, 0x0A	; 10
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 75 00 	call	0xea	; 0xea <CONV__u8UIntToString>
		OS__vWaitSemaphore(&MAIN_s8SemaphoreSPI);
 310:	87 ee       	ldi	r24, 0xE7	; 231
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	0e 94 2d 04 	call	0x85a	; 0x85a <OS__vWaitSemaphore>
		LEDRED_OUT^=LEDRED_PIN;
 318:	88 b1       	in	r24, 0x08	; 8
 31a:	80 58       	subi	r24, 0x80	; 128
 31c:	88 b9       	out	0x08, r24	; 8
		NOKIA5110__vSetCursorChar(u8Column,u8Row);
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	0e 94 0a 02 	call	0x414	; 0x414 <NOKIA5110__vSetCursorChar>
		NOKIA5110__vSendChar((char)'O');
 326:	8f e4       	ldi	r24, 0x4F	; 79
 328:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <NOKIA5110__vSendChar>
		OS__vSignalSemaphore(&MAIN_s8SemaphoreSPI);
 32c:	87 ee       	ldi	r24, 0xE7	; 231
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	0e 94 41 04 	call	0x882	; 0x882 <OS__vSignalSemaphore>
 334:	80 e5       	ldi	r24, 0x50	; 80
 336:	93 ec       	ldi	r25, 0xC3	; 195
 338:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<50000ul;i++);
 33a:	f1 f7       	brne	.-4      	; 0x338 <Task2+0x5e>
 33c:	80 e5       	ldi	r24, 0x50	; 80
 33e:	93 ec       	ldi	r25, 0xC3	; 195
 340:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<50000ul;i++);
 342:	f1 f7       	brne	.-4      	; 0x340 <Task2+0x66>
 344:	d4 cf       	rjmp	.-88     	; 0x2ee <Task2+0x14>

00000346 <main>:
uint8_t MAIN_u8CountBUTTON2=0;

int main(void)
{
	uint8_t u8Column=0, u8Row=0;
	GPIO__vInitPort();
 346:	0e 94 21 02 	call	0x442	; 0x442 <GPIO__vInitPort>
	//NOKIA5110__vInit();
	//NOKIA5110__vSetCursor(0,0);
	//NOKIA5110__vClear();
	//NOKIA5110__u16Print("InDev Mutex\n\rBoton 1:\n\rBoton 2:",&u8Column,&u8Row);
	OS__vInitSemaphore(&MAIN_s8SemaphoreSPI,SEMAPHORE_enInitMUTEX);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	87 ee       	ldi	r24, 0xE7	; 231
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	0e 94 2a 04 	call	0x854	; 0x854 <OS__vInitSemaphore>
	OS__enAddPeriodicThreads(&Task5,250,&Task6,100);
 354:	24 e6       	ldi	r18, 0x64	; 100
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	4d e3       	ldi	r20, 0x3D	; 61
 35a:	51 e0       	ldi	r21, 0x01	; 1
 35c:	6a ef       	ldi	r22, 0xFA	; 250
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	8a e2       	ldi	r24, 0x2A	; 42
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 55 03 	call	0x6aa	; 0x6aa <OS__enAddPeriodicThreads>
	OS__enAddMainThreads(&Task1, &Task2);
 368:	6d e6       	ldi	r22, 0x6D	; 109
 36a:	71 e0       	ldi	r23, 0x01	; 1
 36c:	85 e5       	ldi	r24, 0x55	; 85
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 94 03 	call	0x728	; 0x728 <OS__enAddMainThreads>
	OS__vLaunch();
 374:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <OS__vLaunch>
}
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	08 95       	ret

0000037e <NOKIA5110__vSendCommand>:
}

void NOKIA5110__vSendMultipleCommand(uint8_t* u8Command, uint16_t u16Cant)
{
	NOKIA5110_DC_COMMAND();
	SPI__vSendDataMaster(u8Command,u16Cant);
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	1f 92       	push	r1
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	88 98       	cbi	0x11, 0	; 17
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI__vSendDataMaster>
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <NOKIA5110__vSendData>:
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	88 9a       	sbi	0x11, 0	; 17
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI__vSendDataMaster>
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <NOKIA5110__vSendChar>:
}
void NOKIA5110__vSendChar(uint8_t u8Ascii)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
  int8_t s8Value=u8Ascii - 0x20;
 3c6:	c0 ee       	ldi	r28, 0xE0	; 224
 3c8:	c8 0f       	add	r28, r24
  if(s8Value<0)
 3ca:	0a f1       	brmi	.+66     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	return;
   
   NOKIA5110__vSendData(0);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
   NOKIA5110__vSendData(NOKIA5110_u8ASCII[s8Value][0]);
 3d2:	8c 2f       	mov	r24, r28
 3d4:	cc 0f       	add	r28, r28
 3d6:	99 0b       	sbc	r25, r25
 3d8:	ec 01       	movw	r28, r24
 3da:	cc 0f       	add	r28, r28
 3dc:	dd 1f       	adc	r29, r29
 3de:	cc 0f       	add	r28, r28
 3e0:	dd 1f       	adc	r29, r29
 3e2:	c8 0f       	add	r28, r24
 3e4:	d9 1f       	adc	r29, r25
 3e6:	ca 5f       	subi	r28, 0xFA	; 250
 3e8:	de 4f       	sbci	r29, 0xFE	; 254
 3ea:	88 81       	ld	r24, Y
 3ec:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
   NOKIA5110__vSendData(NOKIA5110_u8ASCII[s8Value][1]);
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
   NOKIA5110__vSendData(NOKIA5110_u8ASCII[s8Value][2]);
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
   NOKIA5110__vSendData(NOKIA5110_u8ASCII[s8Value][3]);
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
   NOKIA5110__vSendData(NOKIA5110_u8ASCII[s8Value][4]);
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
   NOKIA5110__vSendData(0);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <NOKIA5110__vSendData>
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <NOKIA5110__vSetCursorChar>:



void NOKIA5110__vSetCursorChar(uint8_t u8X, uint8_t u8Y)
{
 414:	cf 93       	push	r28
 416:	c6 2f       	mov	r28, r22
	if(u8X > (NOKIA5110_COLUMN_SIZE-1))
 418:	8c 30       	cpi	r24, 0x0C	; 12
 41a:	08 f0       	brcs	.+2      	; 0x41e <NOKIA5110__vSetCursorChar+0xa>
		u8X=0;
 41c:	80 e0       	ldi	r24, 0x00	; 0
	if(u8Y > (NOKIA5110_ROW_SIZE-1))
 41e:	c6 30       	cpi	r28, 0x06	; 6
 420:	08 f0       	brcs	.+2      	; 0x424 <NOKIA5110__vSetCursorChar+0x10>
		u8Y=0;
 422:	c0 e0       	ldi	r28, 0x00	; 0
	
	NOKIA5110__vSendCommand(0x80|(u8X*7));
 424:	98 2f       	mov	r25, r24
 426:	99 0f       	add	r25, r25
 428:	99 0f       	add	r25, r25
 42a:	99 0f       	add	r25, r25
 42c:	98 1b       	sub	r25, r24
 42e:	89 2f       	mov	r24, r25
 430:	80 68       	ori	r24, 0x80	; 128
 432:	0e 94 bf 01 	call	0x37e	; 0x37e <NOKIA5110__vSendCommand>
	NOKIA5110__vSendCommand(0x40|u8Y);
 436:	8c 2f       	mov	r24, r28
 438:	80 64       	ori	r24, 0x40	; 64
 43a:	0e 94 bf 01 	call	0x37e	; 0x37e <NOKIA5110__vSendCommand>
}
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <GPIO__vInitPort>:
}
uint8_t GPIO__u8GetCounterRisingINT0(void)
{
	return GPIO_u8CountINT0;
	
}
 442:	85 b7       	in	r24, 0x35	; 53
 444:	8f 7e       	andi	r24, 0xEF	; 239
 446:	85 bf       	out	0x35, r24	; 53
 448:	54 98       	cbi	0x0a, 4	; 10
 44a:	5c 9a       	sbi	0x0b, 4	; 11
 44c:	50 98       	cbi	0x0a, 0	; 10
 44e:	58 9a       	sbi	0x0b, 0	; 11
 450:	51 98       	cbi	0x0a, 1	; 10
 452:	59 9a       	sbi	0x0b, 1	; 11
 454:	3f 9a       	sbi	0x07, 7	; 7
 456:	87 9a       	sbi	0x10, 7	; 16
 458:	86 9a       	sbi	0x10, 6	; 16
 45a:	85 9a       	sbi	0x10, 5	; 16
 45c:	47 98       	cbi	0x08, 7	; 8
 45e:	8f 98       	cbi	0x11, 7	; 17
 460:	8e 98       	cbi	0x11, 6	; 17
 462:	8d 98       	cbi	0x11, 5	; 17
 464:	08 95       	ret

00000466 <__vector_1>:

/*Interrupt for INT0 PD2*/
ISR(INT0_vect)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	8f 93       	push	r24
	GPIO_u8CountINT0++;
 472:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <GPIO_u8CountINT0>
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <GPIO_u8CountINT0>
}
 47c:	8f 91       	pop	r24
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <__vector_9>:

ISR(PCINT0_vect)
{
 488:	1f 92       	push	r1
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	0f 92       	push	r0
 490:	11 24       	eor	r1, r1
 492:	2f 93       	push	r18
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
	static uint8_t u8PreviousValuePB1=(1<<PINB1);
	static uint8_t u8PreviousValuePB2=(1<<PINB2);
	
	uint8_t u8ActualValuePB1=(PINB & (1<<PINB1));
 498:	93 b1       	in	r25, 0x03	; 3
 49a:	92 70       	andi	r25, 0x02	; 2
	uint8_t u8ActualValuePB2=(PINB & (1<<PINB2));
 49c:	83 b1       	in	r24, 0x03	; 3
 49e:	84 70       	andi	r24, 0x04	; 4
	if(u8ActualValuePB1 != u8PreviousValuePB1 )
 4a0:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <u8PreviousValuePB1.1665>
 4a4:	92 17       	cp	r25, r18
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <__vector_9+0x28>
	{
		if( u8ActualValuePB1==0)/*Pin change from 5v to 0v Falling edge*/
 4a8:	91 11       	cpse	r25, r1
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__vector_9+0x28>
		{
			GPIO_u8CountPCINT2=0;
 4ac:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{
		}
	}
	if(u8ActualValuePB2 != u8PreviousValuePB2 )
 4b0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <u8PreviousValuePB2.1666>
 4b4:	82 17       	cp	r24, r18
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <__vector_9+0x3e>
	{
		if( u8ActualValuePB2==0)/*Pin change from 5v to 0v Falling edge*/
 4b8:	81 11       	cpse	r24, r1
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__vector_9+0x3e>
		{
			GPIO_u8CountPCINT2++;	
 4bc:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <GPIO_u8CountPCINT2>
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	20 93 e9 02 	sts	0x02E9, r18	; 0x8002e9 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{	
		}
	}
	u8PreviousValuePB1=u8ActualValuePB1;
 4c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <u8PreviousValuePB1.1665>
	u8PreviousValuePB2=u8ActualValuePB2;
 4ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8PreviousValuePB2.1666>
}
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <SPI__vSendDataMaster>:
	PORTB|=(1<<DDB0);
}
void SPI__vSendDataMaster(uint8_t* pu8DataOut,int16_t s16DataNumber )
{
	uint8_t u8Dummy=0;
	if((SPSR&(1<<SPIF))==(1<<SPIF))
 4de:	0d b4       	in	r0, 0x2d	; 45
 4e0:	07 fc       	sbrc	r0, 7
	u8Dummy=SPDR;
 4e2:	2e b5       	in	r18, 0x2e	; 46
	
	PORTB&=~(1<<DDB0);
 4e4:	28 98       	cbi	0x05, 0	; 5
	while((uint16_t)s16DataNumber>0)
 4e6:	61 15       	cp	r22, r1
 4e8:	71 05       	cpc	r23, r1
 4ea:	79 f0       	breq	.+30     	; 0x50a <SPI__vSendDataMaster+0x2c>
 4ec:	fc 01       	movw	r30, r24
 4ee:	68 0f       	add	r22, r24
 4f0:	79 1f       	adc	r23, r25
	{
		SPCR|=(1<<MSTR);
 4f2:	9c b5       	in	r25, 0x2c	; 44
 4f4:	90 61       	ori	r25, 0x10	; 16
 4f6:	9c bd       	out	0x2c, r25	; 44
		SPDR=*pu8DataOut;
 4f8:	91 91       	ld	r25, Z+
 4fa:	9e bd       	out	0x2e, r25	; 46
		while((SPSR&(1<<SPIF))==0);
 4fc:	0d b4       	in	r0, 0x2d	; 45
 4fe:	07 fe       	sbrs	r0, 7
 500:	fd cf       	rjmp	.-6      	; 0x4fc <SPI__vSendDataMaster+0x1e>
		u8Dummy=SPDR;
 502:	8e b5       	in	r24, 0x2e	; 46
	uint8_t u8Dummy=0;
	if((SPSR&(1<<SPIF))==(1<<SPIF))
	u8Dummy=SPDR;
	
	PORTB&=~(1<<DDB0);
	while((uint16_t)s16DataNumber>0)
 504:	e6 17       	cp	r30, r22
 506:	f7 07       	cpc	r31, r23
 508:	a1 f7       	brne	.-24     	; 0x4f2 <SPI__vSendDataMaster+0x14>
		u8Dummy=SPDR;
		pu8DataOut++;
		s16DataNumber--;
	}
	
	PORTB|=(1<<DDB0);
 50a:	28 9a       	sbi	0x05, 0	; 5
 50c:	08 95       	ret

0000050e <Timer0__vInit>:
{
	TIMSK0= ((uint8_t)enInterrupt&0x07);
	
}void Timer0__vDisableInterrupt(Timer0_nInterrupt enInterrupt)
{
	TIMSK0&=~((uint8_t)enInterrupt&0x07);
 50e:	95 b5       	in	r25, 0x25	; 37
 510:	98 7f       	andi	r25, 0xF8	; 248
 512:	95 bd       	out	0x25, r25	; 37
 514:	94 b5       	in	r25, 0x24	; 36
 516:	9c 7f       	andi	r25, 0xFC	; 252
 518:	94 bd       	out	0x24, r25	; 36
 51a:	95 b5       	in	r25, 0x25	; 37
 51c:	97 7f       	andi	r25, 0xF7	; 247
 51e:	95 bd       	out	0x25, r25	; 37
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	a1 f0       	breq	.+40     	; 0x54c <Timer0__vInit+0x3e>
 524:	28 f4       	brcc	.+10     	; 0x530 <Timer0__vInit+0x22>
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	41 f0       	breq	.+16     	; 0x53a <Timer0__vInit+0x2c>
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	51 f0       	breq	.+20     	; 0x542 <Timer0__vInit+0x34>
 52e:	20 c0       	rjmp	.+64     	; 0x570 <Timer0__vInit+0x62>
 530:	85 30       	cpi	r24, 0x05	; 5
 532:	81 f0       	breq	.+32     	; 0x554 <Timer0__vInit+0x46>
 534:	87 30       	cpi	r24, 0x07	; 7
 536:	a9 f0       	breq	.+42     	; 0x562 <Timer0__vInit+0x54>
 538:	1b c0       	rjmp	.+54     	; 0x570 <Timer0__vInit+0x62>
 53a:	84 b5       	in	r24, 0x24	; 36
 53c:	81 60       	ori	r24, 0x01	; 1
 53e:	84 bd       	out	0x24, r24	; 36
 540:	17 c0       	rjmp	.+46     	; 0x570 <Timer0__vInit+0x62>
 542:	84 b5       	in	r24, 0x24	; 36
 544:	82 60       	ori	r24, 0x02	; 2
 546:	84 bd       	out	0x24, r24	; 36
 548:	47 bd       	out	0x27, r20	; 39
 54a:	12 c0       	rjmp	.+36     	; 0x570 <Timer0__vInit+0x62>
 54c:	84 b5       	in	r24, 0x24	; 36
 54e:	83 60       	ori	r24, 0x03	; 3
 550:	84 bd       	out	0x24, r24	; 36
 552:	0e c0       	rjmp	.+28     	; 0x570 <Timer0__vInit+0x62>
 554:	84 b5       	in	r24, 0x24	; 36
 556:	81 60       	ori	r24, 0x01	; 1
 558:	84 bd       	out	0x24, r24	; 36
 55a:	85 b5       	in	r24, 0x25	; 37
 55c:	88 60       	ori	r24, 0x08	; 8
 55e:	85 bd       	out	0x25, r24	; 37
 560:	47 bd       	out	0x27, r20	; 39
 562:	84 b5       	in	r24, 0x24	; 36
 564:	83 60       	ori	r24, 0x03	; 3
 566:	84 bd       	out	0x24, r24	; 36
 568:	85 b5       	in	r24, 0x25	; 37
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	85 bd       	out	0x25, r24	; 37
 56e:	47 bd       	out	0x27, r20	; 39
 570:	16 bc       	out	0x26, r1	; 38
 572:	85 b5       	in	r24, 0x25	; 37
 574:	67 70       	andi	r22, 0x07	; 7
 576:	68 2b       	or	r22, r24
 578:	65 bd       	out	0x25, r22	; 37
 57a:	08 95       	ret

0000057c <Timer0__vEnableInterrupt>:
 57c:	87 70       	andi	r24, 0x07	; 7
 57e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 582:	08 95       	ret

00000584 <Timer0__vClearInterrupt>:
}
void Timer0__vClearInterrupt(Timer0_nInterrupt enInterrupt)
{
	TIFR0&=~ ((uint8_t)enInterrupt&0x07);
 584:	95 b3       	in	r25, 0x15	; 21
 586:	87 70       	andi	r24, 0x07	; 7
 588:	80 95       	com	r24
 58a:	98 23       	and	r25, r24
 58c:	95 bb       	out	0x15, r25	; 21
 58e:	08 95       	ret

00000590 <OS__u8StartCriticalSection>:
int8_t   OS_ps8Stacks[NUMTHREADS][STACKSIZE];


uint8_t OS__u8StartCriticalSection(void)
{
	uint8_t u8State=SREG&0x80;
 590:	8f b7       	in	r24, 0x3f	; 63
	cli();
 592:	f8 94       	cli
	return u8State;
}
 594:	80 78       	andi	r24, 0x80	; 128
 596:	08 95       	ret

00000598 <OS__vEndCriticalSection>:

void OS__vEndCriticalSection(uint8_t u8Status)
{
	SREG|=u8Status;
 598:	9f b7       	in	r25, 0x3f	; 63
 59a:	89 2b       	or	r24, r25
 59c:	8f bf       	out	0x3f, r24	; 63
 59e:	08 95       	ret

000005a0 <OS_vSetInitialStack>:
}

void OS_vSetInitialStack(uint8_t i){
	OS_sTCBs[i].sp = &OS_ps8Stacks[i][STACKSIZE-36]; // thread stack pointer
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	f9 01       	movw	r30, r18
 5a6:	ee 0f       	add	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	e4 56       	subi	r30, 0x64	; 100
 5b0:	f6 4f       	sbci	r31, 0xF6	; 246
 5b2:	40 e5       	ldi	r20, 0x50	; 80
 5b4:	53 e0       	ldi	r21, 0x03	; 3
 5b6:	24 9f       	mul	r18, r20
 5b8:	c0 01       	movw	r24, r0
 5ba:	25 9f       	mul	r18, r21
 5bc:	90 0d       	add	r25, r0
 5be:	34 9f       	mul	r19, r20
 5c0:	90 0d       	add	r25, r0
 5c2:	11 24       	eor	r1, r1
 5c4:	9c 01       	movw	r18, r24
 5c6:	2e 5d       	subi	r18, 0xDE	; 222
 5c8:	39 4f       	sbci	r19, 0xF9	; 249
 5ca:	31 83       	std	Z+1, r19	; 0x01
 5cc:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-1] = 0x01; // Thumb bit (PC counter low)
 5ce:	8a 50       	subi	r24, 0x0A	; 10
 5d0:	9d 4f       	sbci	r25, 0xFD	; 253
 5d2:	fc 01       	movw	r30, r24
 5d4:	e1 5b       	subi	r30, 0xB1	; 177
 5d6:	fc 4f       	sbci	r31, 0xFC	; 252
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-2] = 0x02; // Thumb bit (PC counter hight)
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	22 e0       	ldi	r18, 0x02	; 2
 5e0:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-3] = 0x03; // R0
 5e2:	31 97       	sbiw	r30, 0x01	; 1
 5e4:	23 e0       	ldi	r18, 0x03	; 3
 5e6:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-4] = 0x04; // SREG
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	24 e0       	ldi	r18, 0x04	; 4
 5ec:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-5] = 0x05; // R1
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	25 e0       	ldi	r18, 0x05	; 5
 5f2:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-6] = 0x06; // R2
 5f4:	31 97       	sbiw	r30, 0x01	; 1
 5f6:	26 e0       	ldi	r18, 0x06	; 6
 5f8:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-7] = 0x07; // R3
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	27 e0       	ldi	r18, 0x07	; 7
 5fe:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-8] = 0x08; // R4
 600:	31 97       	sbiw	r30, 0x01	; 1
 602:	28 e0       	ldi	r18, 0x08	; 8
 604:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-9] = 0x09; // R5
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	29 e0       	ldi	r18, 0x09	; 9
 60a:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-10] = 0x10; // R6
 60c:	31 97       	sbiw	r30, 0x01	; 1
 60e:	20 e1       	ldi	r18, 0x10	; 16
 610:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-11] = 0x11; // R7
 612:	31 97       	sbiw	r30, 0x01	; 1
 614:	21 e1       	ldi	r18, 0x11	; 17
 616:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-12] = 0x12; // R8
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	22 e1       	ldi	r18, 0x12	; 18
 61c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-13] = 0x13; // R9
 61e:	31 97       	sbiw	r30, 0x01	; 1
 620:	23 e1       	ldi	r18, 0x13	; 19
 622:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-14] = 0x14; // R10
 624:	31 97       	sbiw	r30, 0x01	; 1
 626:	24 e1       	ldi	r18, 0x14	; 20
 628:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-15] = 0x15; // R11
 62a:	31 97       	sbiw	r30, 0x01	; 1
 62c:	25 e1       	ldi	r18, 0x15	; 21
 62e:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-16] = 0x16; // R12
 630:	31 97       	sbiw	r30, 0x01	; 1
 632:	26 e1       	ldi	r18, 0x16	; 22
 634:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-17] = 0x17; // R13
 636:	31 97       	sbiw	r30, 0x01	; 1
 638:	27 e1       	ldi	r18, 0x17	; 23
 63a:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-18] = 0x18; // R14
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	28 e1       	ldi	r18, 0x18	; 24
 640:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-19] = 0x19; // R15
 642:	31 97       	sbiw	r30, 0x01	; 1
 644:	29 e1       	ldi	r18, 0x19	; 25
 646:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-20] = 0x20; // R16
 648:	31 97       	sbiw	r30, 0x01	; 1
 64a:	20 e2       	ldi	r18, 0x20	; 32
 64c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-21] = 0x21; // R17
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	21 e2       	ldi	r18, 0x21	; 33
 652:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-22] = 0x22; // R18
 654:	31 97       	sbiw	r30, 0x01	; 1
 656:	22 e2       	ldi	r18, 0x22	; 34
 658:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-23] = 0x23; // R19
 65a:	31 97       	sbiw	r30, 0x01	; 1
 65c:	23 e2       	ldi	r18, 0x23	; 35
 65e:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-24] = 0x24; // R20
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	24 e2       	ldi	r18, 0x24	; 36
 664:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-25] = 0x25; // R21
 666:	31 97       	sbiw	r30, 0x01	; 1
 668:	25 e2       	ldi	r18, 0x25	; 37
 66a:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-26] = 0x26; // R22
 66c:	31 97       	sbiw	r30, 0x01	; 1
 66e:	26 e2       	ldi	r18, 0x26	; 38
 670:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-27] = 0x27; // R23
 672:	31 97       	sbiw	r30, 0x01	; 1
 674:	27 e2       	ldi	r18, 0x27	; 39
 676:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-28] = 0x28; // R24
 678:	31 97       	sbiw	r30, 0x01	; 1
 67a:	28 e2       	ldi	r18, 0x28	; 40
 67c:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-29] = 0x29; // R25
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	29 e2       	ldi	r18, 0x29	; 41
 682:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-30] = 0x30; // R26
 684:	31 97       	sbiw	r30, 0x01	; 1
 686:	20 e3       	ldi	r18, 0x30	; 48
 688:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-31] = 0x31; // R27
 68a:	31 97       	sbiw	r30, 0x01	; 1
 68c:	21 e3       	ldi	r18, 0x31	; 49
 68e:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-32] = 0x32; // R28
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	22 e3       	ldi	r18, 0x32	; 50
 694:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-33] = 0x33; // R29
 696:	31 97       	sbiw	r30, 0x01	; 1
 698:	23 e3       	ldi	r18, 0x33	; 51
 69a:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-34] = 0x34; // R30
 69c:	31 97       	sbiw	r30, 0x01	; 1
 69e:	24 e3       	ldi	r18, 0x34	; 52
 6a0:	20 83       	st	Z, r18
	OS_ps8Stacks[i][STACKSIZE-35] = 0x35; // R31
 6a2:	31 97       	sbiw	r30, 0x01	; 1
 6a4:	25 e3       	ldi	r18, 0x35	; 53
 6a6:	20 83       	st	Z, r18
 6a8:	08 95       	ret

000006aa <OS__enAddPeriodicThreads>:
uint16_t OS_u16PeriodTask0=0, OS_u16PeriodTask1=0;
uint32_t OS_u32MaxPeriod=0;
OS_nStatus OS__enAddPeriodicThreads(void(*vPeriodicTask0)(void), 
uint16_t u16PeriodTask0, void(*vPeriodicTask1)(void), uint16_t u16PeriodTask1)
{
	OS_vPeriodicTask0=vPeriodicTask0;
 6aa:	90 93 9b 09 	sts	0x099B, r25	; 0x80099b <OS_vPeriodicTask0+0x1>
 6ae:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <OS_vPeriodicTask0>
	OS_vPeriodicTask1=vPeriodicTask1;
 6b2:	50 93 99 09 	sts	0x0999, r21	; 0x800999 <OS_vPeriodicTask1+0x1>
 6b6:	40 93 98 09 	sts	0x0998, r20	; 0x800998 <OS_vPeriodicTask1>
	if(u16PeriodTask0!=0)
 6ba:	61 15       	cp	r22, r1
 6bc:	71 05       	cpc	r23, r1
 6be:	29 f0       	breq	.+10     	; 0x6ca <OS__enAddPeriodicThreads+0x20>
		OS_u16PeriodTask0=u16PeriodTask0;
 6c0:	70 93 f5 02 	sts	0x02F5, r23	; 0x8002f5 <OS_u16PeriodTask0+0x1>
 6c4:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <OS_u16PeriodTask0>
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <OS__enAddPeriodicThreads+0x2c>
	else
		OS_u16PeriodTask0=1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <OS_u16PeriodTask0+0x1>
 6d2:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <OS_u16PeriodTask0>
	if(u16PeriodTask1!=0)
 6d6:	21 15       	cp	r18, r1
 6d8:	31 05       	cpc	r19, r1
 6da:	29 f0       	breq	.+10     	; 0x6e6 <OS__enAddPeriodicThreads+0x3c>
		OS_u16PeriodTask1=u16PeriodTask1;
 6dc:	30 93 f3 02 	sts	0x02F3, r19	; 0x8002f3 <OS_u16PeriodTask1+0x1>
 6e0:	20 93 f2 02 	sts	0x02F2, r18	; 0x8002f2 <OS_u16PeriodTask1>
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <OS__enAddPeriodicThreads+0x48>
	else
		OS_u16PeriodTask1=1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <OS_u16PeriodTask1+0x1>
 6ee:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <OS_u16PeriodTask1>
		
	OS_u32MaxPeriod= (OS_u16PeriodTask0*OS_u16PeriodTask1);
 6f2:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <OS_u16PeriodTask0>
 6f6:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <OS_u16PeriodTask0+0x1>
 6fa:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <OS_u16PeriodTask1>
 6fe:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <OS_u16PeriodTask1+0x1>
 702:	42 9f       	mul	r20, r18
 704:	c0 01       	movw	r24, r0
 706:	43 9f       	mul	r20, r19
 708:	90 0d       	add	r25, r0
 70a:	52 9f       	mul	r21, r18
 70c:	90 0d       	add	r25, r0
 70e:	11 24       	eor	r1, r1
 710:	a0 e0       	ldi	r26, 0x00	; 0
 712:	b0 e0       	ldi	r27, 0x00	; 0
 714:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <OS_u32MaxPeriod>
 718:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <OS_u32MaxPeriod+0x1>
 71c:	a0 93 f0 02 	sts	0x02F0, r26	; 0x8002f0 <OS_u32MaxPeriod+0x2>
 720:	b0 93 f1 02 	sts	0x02F1, r27	; 0x8002f1 <OS_u32MaxPeriod+0x3>
	return OS_enOK;
}
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret

00000728 <OS__enAddMainThreads>:

OS_nStatus OS__enAddMainThreads(void(*vTask0)(void),
void(*vTask1)(void))
/*,
void(*vTask2)(void),
void(*vTask3)(void))*/{
 728:	df 92       	push	r13
 72a:	ef 92       	push	r14
 72c:	ff 92       	push	r15
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	d8 2e       	mov	r13, r24
 738:	e9 2e       	mov	r14, r25
 73a:	f6 2e       	mov	r15, r22
 73c:	07 2f       	mov	r16, r23
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
 73e:	0e 94 c8 02 	call	0x590	; 0x590 <OS__u8StartCriticalSection>
 742:	18 2f       	mov	r17, r24
	OS_sTCBs[0].next = &OS_sTCBs[1]; // 0 points to 1
 744:	cc e9       	ldi	r28, 0x9C	; 156
 746:	d9 e0       	ldi	r29, 0x09	; 9
 748:	80 ea       	ldi	r24, 0xA0	; 160
 74a:	99 e0       	ldi	r25, 0x09	; 9
 74c:	9b 83       	std	Y+3, r25	; 0x03
 74e:	8a 83       	std	Y+2, r24	; 0x02
	OS_sTCBs[1].next = &OS_sTCBs[0]; // 1 points to 2
 750:	df 83       	std	Y+7, r29	; 0x07
 752:	ce 83       	std	Y+6, r28	; 0x06
	//OS_sTCBs[2].next = &OS_sTCBs[3]; // 2 points to 0
	//OS_sTCBs[3].next = &OS_sTCBs[0]; // 2 points to 0

	OS_vSetInitialStack(0); 
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <OS_vSetInitialStack>
	OS_ps8Stacks[0][STACKSIZE-1] =((int16_t)vTask0)&0xFF; // PC
 75a:	d0 92 45 06 	sts	0x0645, r13	; 0x800645 <OS_ps8Stacks+0x34f>
	OS_ps8Stacks[0][STACKSIZE-2] = (((int16_t)vTask0)>>8)&0xFF; // PC
 75e:	e0 92 44 06 	sts	0x0644, r14	; 0x800644 <OS_ps8Stacks+0x34e>
	OS_vSetInitialStack(1); 
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <OS_vSetInitialStack>
	OS_ps8Stacks[1][STACKSIZE-1] =((int16_t)vTask1)&0xFF; // PC
 768:	f0 92 95 09 	sts	0x0995, r15	; 0x800995 <OS_ps8Stacks+0x69f>
	OS_ps8Stacks[1][STACKSIZE-2] = (((int16_t)vTask1)>>8)&0xFF; // PC
 76c:	00 93 94 09 	sts	0x0994, r16	; 0x800994 <OS_ps8Stacks+0x69e>
	OS_ps8Stacks[2][STACKSIZE-2] = (((int16_t)vTask2)>>8)&0xFF; // PC
	OS_vSetInitialStack(3);
	OS_ps8Stacks[3][STACKSIZE-1] =((int16_t)vTask3)&0xFF; // PC
	OS_ps8Stacks[3][STACKSIZE-2] = (((int16_t)vTask3)>>8)&0xFF; // PC
	*/
	OS_psRunPt = &OS_sTCBs[0];        // thread 0 will run first
 770:	d0 93 97 09 	sts	0x0997, r29	; 0x800997 <OS_psRunPt+0x1>
 774:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <OS_psRunPt>
	OS__vEndCriticalSection(u8Status);
 778:	81 2f       	mov	r24, r17
 77a:	0e 94 cc 02 	call	0x598	; 0x598 <OS__vEndCriticalSection>
	return OS_enOK; // successful
}
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	ff 90       	pop	r15
 78a:	ef 90       	pop	r14
 78c:	df 90       	pop	r13
 78e:	08 95       	ret

00000790 <OS_vScheduler>:

void OS_vScheduler(void)
{	
	static uint32_t u32Count= 0;
	u32Count%=OS_u32MaxPeriod;
 790:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <u32Count.1778>
 794:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <u32Count.1778+0x1>
 798:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <u32Count.1778+0x2>
 79c:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <u32Count.1778+0x3>
 7a0:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <OS_u32MaxPeriod>
 7a4:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <OS_u32MaxPeriod+0x1>
 7a8:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <OS_u32MaxPeriod+0x2>
 7ac:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <OS_u32MaxPeriod+0x3>
 7b0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__udivmodsi4>
 7b4:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <u32Count.1778>
 7b8:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <u32Count.1778+0x1>
 7bc:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <u32Count.1778+0x2>
 7c0:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <u32Count.1778+0x3>
	 if(((uint32_t)u32Count%(uint32_t)OS_u16PeriodTask0) == 0)
 7c4:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <OS_u16PeriodTask0>
 7c8:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <OS_u16PeriodTask0+0x1>
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__udivmodsi4>
 7d4:	67 2b       	or	r22, r23
 7d6:	68 2b       	or	r22, r24
 7d8:	69 2b       	or	r22, r25
 7da:	29 f4       	brne	.+10     	; 0x7e6 <OS_vScheduler+0x56>
	 { 
		 OS_vPeriodicTask0();
 7dc:	e0 91 9a 09 	lds	r30, 0x099A	; 0x80099a <OS_vPeriodicTask0>
 7e0:	f0 91 9b 09 	lds	r31, 0x099B	; 0x80099b <OS_vPeriodicTask0+0x1>
 7e4:	09 95       	icall
	 }
	 if(((uint32_t)u32Count%(uint32_t)OS_u16PeriodTask1) == 0)
 7e6:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <OS_u16PeriodTask1>
 7ea:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <OS_u16PeriodTask1+0x1>
 7ee:	40 e0       	ldi	r20, 0x00	; 0
 7f0:	50 e0       	ldi	r21, 0x00	; 0
 7f2:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <u32Count.1778>
 7f6:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <u32Count.1778+0x1>
 7fa:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <u32Count.1778+0x2>
 7fe:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <u32Count.1778+0x3>
 802:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__udivmodsi4>
 806:	67 2b       	or	r22, r23
 808:	68 2b       	or	r22, r24
 80a:	69 2b       	or	r22, r25
 80c:	29 f4       	brne	.+10     	; 0x818 <OS_vScheduler+0x88>
	 { 
		 OS_vPeriodicTask1();
 80e:	e0 91 98 09 	lds	r30, 0x0998	; 0x800998 <OS_vPeriodicTask1>
 812:	f0 91 99 09 	lds	r31, 0x0999	; 0x800999 <OS_vPeriodicTask1+0x1>
 816:	09 95       	icall
	 }	
	u32Count++;
 818:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <u32Count.1778>
 81c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <u32Count.1778+0x1>
 820:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <u32Count.1778+0x2>
 824:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <u32Count.1778+0x3>
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	a1 1d       	adc	r26, r1
 82c:	b1 1d       	adc	r27, r1
 82e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <u32Count.1778>
 832:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <u32Count.1778+0x1>
 836:	a0 93 ec 02 	sts	0x02EC, r26	; 0x8002ec <u32Count.1778+0x2>
 83a:	b0 93 ed 02 	sts	0x02ED, r27	; 0x8002ed <u32Count.1778+0x3>
	OS_psRunPt = OS_psRunPt->next; // Round Robin scheduler
 83e:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <OS_psRunPt>
 842:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <OS_psRunPt+0x1>
 846:	82 81       	ldd	r24, Z+2	; 0x02
 848:	93 81       	ldd	r25, Z+3	; 0x03
 84a:	90 93 97 09 	sts	0x0997, r25	; 0x800997 <OS_psRunPt+0x1>
 84e:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <OS_psRunPt>
 852:	08 95       	ret

00000854 <OS__vInitSemaphore>:

/* SpinLock semaphore*/

void OS__vInitSemaphore(int8_t *ps8Semaphore, SEMAPHORE_nTypeInit enInitValue)
{
	*ps8Semaphore=(int8_t)enInitValue;
 854:	fc 01       	movw	r30, r24
 856:	60 83       	st	Z, r22
 858:	08 95       	ret

0000085a <OS__vWaitSemaphore>:
}

void OS__vWaitSemaphore(int8_t *ps8Semaphore)
{
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	ec 01       	movw	r28, r24
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
 860:	0e 94 c8 02 	call	0x590	; 0x590 <OS__u8StartCriticalSection>
	/*Wait until data are available*/
	while(*ps8Semaphore == 0){
 864:	98 81       	ld	r25, Y
 866:	91 11       	cpse	r25, r1
 868:	05 c0       	rjmp	.+10     	; 0x874 <OS__vWaitSemaphore+0x1a>
	sei(); /* interrupts can occur here*/
 86a:	78 94       	sei
	cli();
 86c:	f8 94       	cli
void OS__vWaitSemaphore(int8_t *ps8Semaphore)
{
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
	/*Wait until data are available*/
	while(*ps8Semaphore == 0){
 86e:	98 81       	ld	r25, Y
 870:	99 23       	and	r25, r25
 872:	d9 f3       	breq	.-10     	; 0x86a <OS__vWaitSemaphore+0x10>
	sei(); /* interrupts can occur here*/
	cli();
	}
	*ps8Semaphore = (*ps8Semaphore) - 1;
 874:	91 50       	subi	r25, 0x01	; 1
 876:	98 83       	st	Y, r25
	OS__vEndCriticalSection(u8Status);
 878:	0e 94 cc 02 	call	0x598	; 0x598 <OS__vEndCriticalSection>
} 
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <OS__vSignalSemaphore>:

void OS__vSignalSemaphore(int8_t *ps8Semaphore)
{
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	ec 01       	movw	r28, r24
	uint8_t u8Status;
	u8Status = OS__u8StartCriticalSection();
 888:	0e 94 c8 02 	call	0x590	; 0x590 <OS__u8StartCriticalSection>
	*ps8Semaphore = (*ps8Semaphore) + 1;
 88c:	98 81       	ld	r25, Y
 88e:	9f 5f       	subi	r25, 0xFF	; 255
 890:	98 83       	st	Y, r25
	OS__vEndCriticalSection(u8Status);
 892:	0e 94 cc 02 	call	0x598	; 0x598 <OS__vEndCriticalSection>
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <OS_vStartOS>:
	OS_vStartOS();                   // start on the first task
}

void OS_vStartOS(void)
{
	asm volatile (
 89c:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <OS_psRunPt>
 8a0:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <OS_psRunPt+0x1>
 8a4:	01 90       	ld	r0, Z+
 8a6:	10 80       	ld	r1, Z
 8a8:	0d be       	out	0x3d, r0	; 61
 8aa:	1e be       	out	0x3e, r1	; 62
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	bf 91       	pop	r27
 8b6:	af 91       	pop	r26
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	7f 91       	pop	r23
 8be:	6f 91       	pop	r22
 8c0:	5f 91       	pop	r21
 8c2:	4f 91       	pop	r20
 8c4:	3f 91       	pop	r19
 8c6:	2f 91       	pop	r18
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	bf 90       	pop	r11
 8d6:	af 90       	pop	r10
 8d8:	9f 90       	pop	r9
 8da:	8f 90       	pop	r8
 8dc:	7f 90       	pop	r7
 8de:	6f 90       	pop	r6
 8e0:	5f 90       	pop	r5
 8e2:	4f 90       	pop	r4
 8e4:	3f 90       	pop	r3
 8e6:	2f 90       	pop	r2
 8e8:	1f 90       	pop	r1
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	78 94       	sei
 8f2:	08 95       	ret

000008f4 <OS__vLaunch>:


void OS__vLaunch(void){

	/*Clear pending Interrupt of Timer Overflow*/
	Timer0__vClearInterrupt(Timer0_enInterruptOCIEA);
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	0e 94 c2 02 	call	0x584	; 0x584 <Timer0__vClearInterrupt>
	/*Enable Interrupt of Timer Overflow*/
	Timer0__vEnableInterrupt(Timer0_enInterruptOCIEA);
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	0e 94 be 02 	call	0x57c	; 0x57c <Timer0__vEnableInterrupt>
	
	/*Intialization of Timer: Normal Mode MAX and CLK div64 ~~ 1ms*/
	Timer0__vInit(Timer0_enModeNormal_OCRA,Timer0_enClockDiv64,251);
 900:	4b ef       	ldi	r20, 0xFB	; 251
 902:	63 e0       	ldi	r22, 0x03	; 3
 904:	82 e0       	ldi	r24, 0x02	; 2
 906:	0e 94 87 02 	call	0x50e	; 0x50e <Timer0__vInit>

	OS_vStartOS();                   // start on the first task
 90a:	0e 94 4e 04 	call	0x89c	; 0x89c <OS_vStartOS>
 90e:	08 95       	ret

00000910 <__vector_21>:


// Task switching, ISR_NAKED is necessary to prevent compiler to manipulate the stack
ISR(TIMER0_COMPA_vect, ISR_NAKED) //1) Saves PC
{
	asm volatile (
 910:	f8 94       	cli
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	1f 92       	push	r1
 91a:	2f 92       	push	r2
 91c:	3f 92       	push	r3
 91e:	4f 92       	push	r4
 920:	5f 92       	push	r5
 922:	6f 92       	push	r6
 924:	7f 92       	push	r7
 926:	8f 92       	push	r8
 928:	9f 92       	push	r9
 92a:	af 92       	push	r10
 92c:	bf 92       	push	r11
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	ef 93       	push	r30
 954:	ff 93       	push	r31
 956:	0d b6       	in	r0, 0x3d	; 61
 958:	1e b6       	in	r1, 0x3e	; 62
 95a:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <OS_psRunPt>
 95e:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <OS_psRunPt+0x1>
 962:	01 92       	st	Z+, r0
 964:	10 82       	st	Z, r1
 966:	0e 94 c8 03 	call	0x790	; 0x790 <OS_vScheduler>
 96a:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <OS_psRunPt>
 96e:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <OS_psRunPt+0x1>
 972:	01 90       	ld	r0, Z+
 974:	10 80       	ld	r1, Z
 976:	0d be       	out	0x3d, r0	; 61
 978:	1e be       	out	0x3e, r1	; 62
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	bf 91       	pop	r27
 984:	af 91       	pop	r26
 986:	9f 91       	pop	r25
 988:	8f 91       	pop	r24
 98a:	7f 91       	pop	r23
 98c:	6f 91       	pop	r22
 98e:	5f 91       	pop	r21
 990:	4f 91       	pop	r20
 992:	3f 91       	pop	r19
 994:	2f 91       	pop	r18
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	ff 90       	pop	r15
 99c:	ef 90       	pop	r14
 99e:	df 90       	pop	r13
 9a0:	cf 90       	pop	r12
 9a2:	bf 90       	pop	r11
 9a4:	af 90       	pop	r10
 9a6:	9f 90       	pop	r9
 9a8:	8f 90       	pop	r8
 9aa:	7f 90       	pop	r7
 9ac:	6f 90       	pop	r6
 9ae:	5f 90       	pop	r5
 9b0:	4f 90       	pop	r4
 9b2:	3f 90       	pop	r3
 9b4:	2f 90       	pop	r2
 9b6:	1f 90       	pop	r1
 9b8:	0f 90       	pop	r0
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	0f 90       	pop	r0
 9be:	78 94       	sei
 9c0:	18 95       	reti

000009c2 <__udivmodsi4>:
 9c2:	a1 e2       	ldi	r26, 0x21	; 33
 9c4:	1a 2e       	mov	r1, r26
 9c6:	aa 1b       	sub	r26, r26
 9c8:	bb 1b       	sub	r27, r27
 9ca:	fd 01       	movw	r30, r26
 9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__udivmodsi4_ep>

000009ce <__udivmodsi4_loop>:
 9ce:	aa 1f       	adc	r26, r26
 9d0:	bb 1f       	adc	r27, r27
 9d2:	ee 1f       	adc	r30, r30
 9d4:	ff 1f       	adc	r31, r31
 9d6:	a2 17       	cp	r26, r18
 9d8:	b3 07       	cpc	r27, r19
 9da:	e4 07       	cpc	r30, r20
 9dc:	f5 07       	cpc	r31, r21
 9de:	20 f0       	brcs	.+8      	; 0x9e8 <__udivmodsi4_ep>
 9e0:	a2 1b       	sub	r26, r18
 9e2:	b3 0b       	sbc	r27, r19
 9e4:	e4 0b       	sbc	r30, r20
 9e6:	f5 0b       	sbc	r31, r21

000009e8 <__udivmodsi4_ep>:
 9e8:	66 1f       	adc	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	1a 94       	dec	r1
 9f2:	69 f7       	brne	.-38     	; 0x9ce <__udivmodsi4_loop>
 9f4:	60 95       	com	r22
 9f6:	70 95       	com	r23
 9f8:	80 95       	com	r24
 9fa:	90 95       	com	r25
 9fc:	9b 01       	movw	r18, r22
 9fe:	ac 01       	movw	r20, r24
 a00:	bd 01       	movw	r22, r26
 a02:	cf 01       	movw	r24, r30
 a04:	08 95       	ret

00000a06 <__umoddi3>:
 a06:	68 94       	set
 a08:	01 c0       	rjmp	.+2      	; 0xa0c <__udivdi3_umoddi3>

00000a0a <__udivdi3>:
 a0a:	e8 94       	clt

00000a0c <__udivdi3_umoddi3>:
 a0c:	8f 92       	push	r8
 a0e:	9f 92       	push	r9
 a10:	cf 93       	push	r28
 a12:	df 93       	push	r29
 a14:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmod64>
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	9f 90       	pop	r9
 a1e:	8f 90       	pop	r8
 a20:	08 95       	ret

00000a22 <__udivmod64>:
 a22:	88 24       	eor	r8, r8
 a24:	99 24       	eor	r9, r9
 a26:	f4 01       	movw	r30, r8
 a28:	e4 01       	movw	r28, r8
 a2a:	b0 e4       	ldi	r27, 0x40	; 64
 a2c:	9f 93       	push	r25
 a2e:	aa 27       	eor	r26, r26
 a30:	9a 15       	cp	r25, r10
 a32:	8b 04       	cpc	r8, r11
 a34:	9c 04       	cpc	r9, r12
 a36:	ed 05       	cpc	r30, r13
 a38:	fe 05       	cpc	r31, r14
 a3a:	cf 05       	cpc	r28, r15
 a3c:	d0 07       	cpc	r29, r16
 a3e:	a1 07       	cpc	r26, r17
 a40:	98 f4       	brcc	.+38     	; 0xa68 <__udivmod64+0x46>
 a42:	ad 2f       	mov	r26, r29
 a44:	dc 2f       	mov	r29, r28
 a46:	cf 2f       	mov	r28, r31
 a48:	fe 2f       	mov	r31, r30
 a4a:	e9 2d       	mov	r30, r9
 a4c:	98 2c       	mov	r9, r8
 a4e:	89 2e       	mov	r8, r25
 a50:	98 2f       	mov	r25, r24
 a52:	87 2f       	mov	r24, r23
 a54:	76 2f       	mov	r23, r22
 a56:	65 2f       	mov	r22, r21
 a58:	54 2f       	mov	r21, r20
 a5a:	43 2f       	mov	r20, r19
 a5c:	32 2f       	mov	r19, r18
 a5e:	22 27       	eor	r18, r18
 a60:	b8 50       	subi	r27, 0x08	; 8
 a62:	31 f7       	brne	.-52     	; 0xa30 <__udivmod64+0xe>
 a64:	bf 91       	pop	r27
 a66:	27 c0       	rjmp	.+78     	; 0xab6 <__udivmod64+0x94>
 a68:	1b 2e       	mov	r1, r27
 a6a:	bf 91       	pop	r27
 a6c:	bb 27       	eor	r27, r27
 a6e:	22 0f       	add	r18, r18
 a70:	33 1f       	adc	r19, r19
 a72:	44 1f       	adc	r20, r20
 a74:	55 1f       	adc	r21, r21
 a76:	66 1f       	adc	r22, r22
 a78:	77 1f       	adc	r23, r23
 a7a:	88 1f       	adc	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	88 1c       	adc	r8, r8
 a80:	99 1c       	adc	r9, r9
 a82:	ee 1f       	adc	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	cc 1f       	adc	r28, r28
 a88:	dd 1f       	adc	r29, r29
 a8a:	aa 1f       	adc	r26, r26
 a8c:	bb 1f       	adc	r27, r27
 a8e:	8a 14       	cp	r8, r10
 a90:	9b 04       	cpc	r9, r11
 a92:	ec 05       	cpc	r30, r12
 a94:	fd 05       	cpc	r31, r13
 a96:	ce 05       	cpc	r28, r14
 a98:	df 05       	cpc	r29, r15
 a9a:	a0 07       	cpc	r26, r16
 a9c:	b1 07       	cpc	r27, r17
 a9e:	48 f0       	brcs	.+18     	; 0xab2 <__udivmod64+0x90>
 aa0:	8a 18       	sub	r8, r10
 aa2:	9b 08       	sbc	r9, r11
 aa4:	ec 09       	sbc	r30, r12
 aa6:	fd 09       	sbc	r31, r13
 aa8:	ce 09       	sbc	r28, r14
 aaa:	df 09       	sbc	r29, r15
 aac:	a0 0b       	sbc	r26, r16
 aae:	b1 0b       	sbc	r27, r17
 ab0:	21 60       	ori	r18, 0x01	; 1
 ab2:	1a 94       	dec	r1
 ab4:	e1 f6       	brne	.-72     	; 0xa6e <__udivmod64+0x4c>
 ab6:	2e f4       	brtc	.+10     	; 0xac2 <__udivmod64+0xa0>
 ab8:	94 01       	movw	r18, r8
 aba:	af 01       	movw	r20, r30
 abc:	be 01       	movw	r22, r28
 abe:	cd 01       	movw	r24, r26
 ac0:	00 0c       	add	r0, r0
 ac2:	08 95       	ret

00000ac4 <__cmpdi2_s8>:
 ac4:	00 24       	eor	r0, r0
 ac6:	a7 fd       	sbrc	r26, 7
 ac8:	00 94       	com	r0
 aca:	2a 17       	cp	r18, r26
 acc:	30 05       	cpc	r19, r0
 ace:	40 05       	cpc	r20, r0
 ad0:	50 05       	cpc	r21, r0
 ad2:	60 05       	cpc	r22, r0
 ad4:	70 05       	cpc	r23, r0
 ad6:	80 05       	cpc	r24, r0
 ad8:	90 05       	cpc	r25, r0
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
