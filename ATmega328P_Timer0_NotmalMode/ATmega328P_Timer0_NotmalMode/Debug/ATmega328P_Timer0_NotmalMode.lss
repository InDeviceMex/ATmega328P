
ATmega328P_Timer0_NotmalMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f82  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b4  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041d  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_14>
  3c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_15>
  40:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/interrupt.h>
#include <GPIO.h> /* Driver for GPIO*/
#include <Timer0.h> /* Driver for Timer0*/

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	/*Variable use to modified phase between OC0A and OC0B*/
	uint8_t u8Phase=0;
	uint16_t u16ValueOV=0;
	uint16_t u16ValuePreviousOV=0;
	volatile uint8_t u8CountInputPCINT2=0;
  b0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8CountInputINT0=0;
	/*Port Init PB5, PC4, PC5 as output and PD2, PB1 and PB2 as Input*/
	GPIO__vInitPort(); 
  b2:	0e 94 ab 00 	call	0x156	; 0x156 <GPIO__vInitPort>
	/*Enable interrupt in Inputs (PD2, PB1 and PB2)*/
	GPIO__vInitPortInterrupt();
  b6:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO__vInitPortInterrupt>
	
	/*Set Inmediate Compare value on  OC0A*/
	Timer0__vSetCompareValue(Timer0_enModuleA,0x0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 66 01 	call	0x2cc	; 0x2cc <Timer0__vSetCompareValue>
	/*Set Inmediate Compare value on  OC0B*/
	Timer0__vSetCompareValue(Timer0_enModuleB,u8Phase);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <Timer0__vSetCompareValue>
	/* Set Mode for OC0A and OC0B as Toggle every Compare event*/
	Timer0__vSetOutputMode(Timer0_enModuleA|Timer0_enModuleB,Timer0_enCompareToggle);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 4b 01 	call	0x296	; 0x296 <Timer0__vSetOutputMode>
	/*Pin port initialization for Timer Peripheral*/
	Timer0__vInitPin(Timer0_enModuleA|Timer0_enModuleB);
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 42 01 	call	0x284	; 0x284 <Timer0__vInitPin>
	
	/*Clear pending Interrupt of Timer Overflow*/
	Timer0__vClearInterrupt(Timer0_enInterruptTOIE);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 88 01 	call	0x310	; 0x310 <Timer0__vClearInterrupt>
	/*Enable Interrupt of Timer Overflow*/
	Timer0__vEnableInterrupt(Timer0_enInterruptTOIE);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 84 01 	call	0x308	; 0x308 <Timer0__vEnableInterrupt>
	
	/*Intialization of Timer: Normal Mode MAX and CLK div64 ~~ 1.024ms*/
	Timer0__vInit(Timer0_enModeNormal_MAX,Timer0_enClockDiv64,0);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 0b 01 	call	0x216	; 0x216 <Timer0__vInit>
	/*Enable Global Interrupt*/
	sei();
  ee:	78 94       	sei
int main(void)
{
	/*Variable use to modified phase between OC0A and OC0B*/
	uint8_t u8Phase=0;
	uint16_t u16ValueOV=0;
	uint16_t u16ValuePreviousOV=0;
  f0:	e1 2c       	mov	r14, r1
  f2:	f1 2c       	mov	r15, r1
#include <Timer0.h> /* Driver for Timer0*/

int main(void)
{
	/*Variable use to modified phase between OC0A and OC0B*/
	uint8_t u8Phase=0;
  f4:	d1 2c       	mov	r13, r1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <main+0x54>
  f8:	78 01       	movw	r14, r16
	/*Enable Global Interrupt*/
	sei();
    while (1) 
    {
		/*Temp variables for Shared Information*/
		u16ValueOV=(uint16_t)Timer0__u16GetCounterOV();
  fa:	0e 94 8e 01 	call	0x31c	; 0x31c <Timer0__u16GetCounterOV>
  fe:	8c 01       	movw	r16, r24
		u8CountInputPCINT2=GPIO__u8GetCounterRisingPCINT2();
 100:	0e 94 c6 00 	call	0x18c	; 0x18c <GPIO__u8GetCounterRisingPCINT2>
 104:	89 83       	std	Y+1, r24	; 0x01
		u8CountInputINT0=GPIO__u8GetCounterRisingINT0();
 106:	0e 94 cc 00 	call	0x198	; 0x198 <GPIO__u8GetCounterRisingINT0>
 10a:	28 2f       	mov	r18, r24
		
		/*Wait until another interrupt occur in timer*/
		if(u16ValueOV!=u16ValuePreviousOV)
 10c:	e0 16       	cp	r14, r16
 10e:	f1 06       	cpc	r15, r17
 110:	99 f3       	breq	.-26     	; 0xf8 <main+0x52>
		{
			
			/*This task1 is executed approximately every 1ms*u8CountInputPCINT2 */
			if((u16ValueOV%(u8CountInputPCINT2+1))==0)
 112:	69 81       	ldd	r22, Y+1	; 0x01
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	c8 01       	movw	r24, r16
 11c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 120:	89 2b       	or	r24, r25
 122:	09 f4       	brne	.+2      	; 0x126 <main+0x80>
			{
				LEDRED_OUT|=LEDRED_PIN;
 124:	2d 9a       	sbi	0x05, 5	; 5
			}
			/*This task2 is executed approximately every 1024*1.024ms */
			if((u16ValueOV%(uint16_t)1024)==0)
 126:	c8 01       	movw	r24, r16
 128:	93 70       	andi	r25, 0x03	; 3
 12a:	89 2b       	or	r24, r25
 12c:	09 f4       	brne	.+2      	; 0x130 <main+0x8a>
			{
				LEDAMBER_OUT|=LEDAMBER_PIN;
 12e:	45 9a       	sbi	0x08, 5	; 8
				
			}
			/*This task3 is executed approximately every 256*1.024ms */
			if(((u16ValueOV)%(256))==0)
 130:	01 11       	cpse	r16, r1
 132:	01 c0       	rjmp	.+2      	; 0x136 <main+0x90>
			{
				LEDGREEN_OUT|=LEDGREEN_PIN;
 134:	44 9a       	sbi	0x08, 4	; 8
			}			
			/*This task4 is executed approximately every 64ms */
			if(((u16ValueOV)%(64))==0)
 136:	c8 01       	movw	r24, r16
 138:	8f 73       	andi	r24, 0x3F	; 63
 13a:	99 27       	eor	r25, r25
 13c:	89 2b       	or	r24, r25
 13e:	e1 f6       	brne	.-72     	; 0xf8 <main+0x52>
			{
				/*Task to change pahse of OC0B*/
				if(u8CountInputINT0>0)
 140:	22 23       	and	r18, r18
 142:	d1 f2       	breq	.-76     	; 0xf8 <main+0x52>
				{
					u8Phase+=4;
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	d8 0e       	add	r13, r24
					GPIO__vClearCounterRisingINT0();
 148:	0e 94 c9 00 	call	0x192	; 0x192 <GPIO__vClearCounterRisingINT0>
					Timer0__vSetCompareValueInterrupt(Timer0_enModuleB,u8Phase);
 14c:	6d 2d       	mov	r22, r13
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Timer0__vSetCompareValueInterrupt>
 154:	d1 cf       	rjmp	.-94     	; 0xf8 <main+0x52>

00000156 <GPIO__vInitPort>:
	
}

void GPIO__vSetCounterRisingINT0(uint8_t u8Value)
{
	GPIO_u8CountINT0=u8Value;
 156:	85 b7       	in	r24, 0x35	; 53
 158:	8f 7e       	andi	r24, 0xEF	; 239
 15a:	85 bf       	out	0x35, r24	; 53
 15c:	52 98       	cbi	0x0a, 2	; 10
 15e:	5a 9a       	sbi	0x0b, 2	; 11
 160:	22 98       	cbi	0x04, 2	; 4
 162:	2a 9a       	sbi	0x05, 2	; 5
 164:	21 98       	cbi	0x04, 1	; 4
 166:	29 9a       	sbi	0x05, 1	; 5
 168:	25 9a       	sbi	0x04, 5	; 4
 16a:	3c 9a       	sbi	0x07, 4	; 7
 16c:	3d 9a       	sbi	0x07, 5	; 7
 16e:	2d 98       	cbi	0x05, 5	; 5
 170:	44 98       	cbi	0x08, 4	; 8
 172:	45 98       	cbi	0x08, 5	; 8
 174:	08 95       	ret

00000176 <GPIO__vInitPortInterrupt>:
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8d bb       	out	0x1d, r24	; 29
 180:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 18a:	08 95       	ret

0000018c <GPIO__u8GetCounterRisingPCINT2>:
 18c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <GPIO_u8CountPCINT2>
 190:	08 95       	ret

00000192 <GPIO__vClearCounterRisingINT0>:
 192:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 196:	08 95       	ret

00000198 <GPIO__u8GetCounterRisingINT0>:
	
}
uint8_t GPIO__u8GetCounterRisingINT0(void)
{
	return GPIO_u8CountINT0;
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
	
}
 19c:	08 95       	ret

0000019e <__vector_1>:

/*Interrupt for INT0 PD2*/
ISR(INT0_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
	GPIO_u8CountINT0++;
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_3>:

ISR(PCINT0_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
	static uint8_t u8PreviousValuePB1=(1<<PINB1);
	static uint8_t u8PreviousValuePB2=(1<<PINB2);
	
	uint8_t u8ActualValuePB1=(PINB & (1<<PINB1));
 1d0:	93 b1       	in	r25, 0x03	; 3
 1d2:	92 70       	andi	r25, 0x02	; 2
	uint8_t u8ActualValuePB2=(PINB & (1<<PINB2));
 1d4:	83 b1       	in	r24, 0x03	; 3
 1d6:	84 70       	andi	r24, 0x04	; 4
	if(u8ActualValuePB1 != u8PreviousValuePB1 )
 1d8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <u8PreviousValuePB1.1665>
 1dc:	92 17       	cp	r25, r18
 1de:	21 f0       	breq	.+8      	; 0x1e8 <__vector_3+0x28>
	{
		if( u8ActualValuePB1==0)/*Pin change from 5v to 0v Falling edge*/
 1e0:	91 11       	cpse	r25, r1
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__vector_3+0x28>
		{
			GPIO_u8CountPCINT2=0;
 1e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{
		}
	}
	if(u8ActualValuePB2 != u8PreviousValuePB2 )
 1e8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1ec:	82 17       	cp	r24, r18
 1ee:	39 f0       	breq	.+14     	; 0x1fe <__vector_3+0x3e>
	{
		if( u8ActualValuePB2==0)/*Pin change from 5v to 0v Falling edge*/
 1f0:	81 11       	cpse	r24, r1
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <__vector_3+0x3e>
		{
			GPIO_u8CountPCINT2++;	
 1f4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <GPIO_u8CountPCINT2>
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{	
		}
	}
	u8PreviousValuePB1=u8ActualValuePB1;
 1fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <u8PreviousValuePB1.1665>
	u8PreviousValuePB2=u8ActualValuePB2;
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <Timer0__vInit>:
{
	TIFR0|=((uint8_t)enInterrupt&0x07);
}
void Timer0__vClearCounterOV(void)
{
	Timer0_u16CounterOV=0;
 216:	95 b5       	in	r25, 0x25	; 37
 218:	98 7f       	andi	r25, 0xF8	; 248
 21a:	95 bd       	out	0x25, r25	; 37
 21c:	94 b5       	in	r25, 0x24	; 36
 21e:	9c 7f       	andi	r25, 0xFC	; 252
 220:	94 bd       	out	0x24, r25	; 36
 222:	95 b5       	in	r25, 0x25	; 37
 224:	97 7f       	andi	r25, 0xF7	; 247
 226:	95 bd       	out	0x25, r25	; 37
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	a1 f0       	breq	.+40     	; 0x254 <Timer0__vInit+0x3e>
 22c:	28 f4       	brcc	.+10     	; 0x238 <Timer0__vInit+0x22>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	41 f0       	breq	.+16     	; 0x242 <Timer0__vInit+0x2c>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	51 f0       	breq	.+20     	; 0x24a <Timer0__vInit+0x34>
 236:	20 c0       	rjmp	.+64     	; 0x278 <Timer0__vInit+0x62>
 238:	85 30       	cpi	r24, 0x05	; 5
 23a:	81 f0       	breq	.+32     	; 0x25c <Timer0__vInit+0x46>
 23c:	87 30       	cpi	r24, 0x07	; 7
 23e:	a9 f0       	breq	.+42     	; 0x26a <Timer0__vInit+0x54>
 240:	1b c0       	rjmp	.+54     	; 0x278 <Timer0__vInit+0x62>
 242:	84 b5       	in	r24, 0x24	; 36
 244:	81 60       	ori	r24, 0x01	; 1
 246:	84 bd       	out	0x24, r24	; 36
 248:	17 c0       	rjmp	.+46     	; 0x278 <Timer0__vInit+0x62>
 24a:	84 b5       	in	r24, 0x24	; 36
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	84 bd       	out	0x24, r24	; 36
 250:	47 bd       	out	0x27, r20	; 39
 252:	12 c0       	rjmp	.+36     	; 0x278 <Timer0__vInit+0x62>
 254:	84 b5       	in	r24, 0x24	; 36
 256:	83 60       	ori	r24, 0x03	; 3
 258:	84 bd       	out	0x24, r24	; 36
 25a:	0e c0       	rjmp	.+28     	; 0x278 <Timer0__vInit+0x62>
 25c:	84 b5       	in	r24, 0x24	; 36
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	84 bd       	out	0x24, r24	; 36
 262:	85 b5       	in	r24, 0x25	; 37
 264:	88 60       	ori	r24, 0x08	; 8
 266:	85 bd       	out	0x25, r24	; 37
 268:	47 bd       	out	0x27, r20	; 39
 26a:	84 b5       	in	r24, 0x24	; 36
 26c:	83 60       	ori	r24, 0x03	; 3
 26e:	84 bd       	out	0x24, r24	; 36
 270:	85 b5       	in	r24, 0x25	; 37
 272:	88 60       	ori	r24, 0x08	; 8
 274:	85 bd       	out	0x25, r24	; 37
 276:	47 bd       	out	0x27, r20	; 39
 278:	16 bc       	out	0x26, r1	; 38
 27a:	85 b5       	in	r24, 0x25	; 37
 27c:	67 70       	andi	r22, 0x07	; 7
 27e:	68 2b       	or	r22, r24
 280:	65 bd       	out	0x25, r22	; 37
 282:	08 95       	ret

00000284 <Timer0__vInitPin>:
 284:	80 ff       	sbrs	r24, 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <Timer0__vInitPin+0x8>
 288:	56 9a       	sbi	0x0a, 6	; 10
 28a:	5e 98       	cbi	0x0b, 6	; 11
 28c:	81 ff       	sbrs	r24, 1
 28e:	02 c0       	rjmp	.+4      	; 0x294 <Timer0__vInitPin+0x10>
 290:	55 9a       	sbi	0x0a, 5	; 10
 292:	5d 98       	cbi	0x0b, 5	; 11
 294:	08 95       	ret

00000296 <Timer0__vSetOutputMode>:
 296:	80 ff       	sbrs	r24, 0
 298:	0a c0       	rjmp	.+20     	; 0x2ae <Timer0__vSetOutputMode+0x18>
 29a:	94 b5       	in	r25, 0x24	; 36
 29c:	9f 73       	andi	r25, 0x3F	; 63
 29e:	94 bd       	out	0x24, r25	; 36
 2a0:	94 b5       	in	r25, 0x24	; 36
 2a2:	40 e4       	ldi	r20, 0x40	; 64
 2a4:	64 9f       	mul	r22, r20
 2a6:	90 01       	movw	r18, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	29 2b       	or	r18, r25
 2ac:	24 bd       	out	0x24, r18	; 36
 2ae:	81 ff       	sbrs	r24, 1
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <Timer0__vSetOutputMode+0x34>
 2b2:	84 b5       	in	r24, 0x24	; 36
 2b4:	8f 7c       	andi	r24, 0xCF	; 207
 2b6:	84 bd       	out	0x24, r24	; 36
 2b8:	94 b5       	in	r25, 0x24	; 36
 2ba:	86 2f       	mov	r24, r22
 2bc:	83 70       	andi	r24, 0x03	; 3
 2be:	20 e1       	ldi	r18, 0x10	; 16
 2c0:	82 9f       	mul	r24, r18
 2c2:	b0 01       	movw	r22, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	69 2b       	or	r22, r25
 2c8:	64 bd       	out	0x24, r22	; 36
 2ca:	08 95       	ret

000002cc <Timer0__vSetCompareValue>:
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <Timer0__vSetCompareValue+0xa>
 2d0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <Timer0_u8CompareValueOCA>
 2d4:	67 bd       	out	0x27, r22	; 39
 2d6:	81 ff       	sbrs	r24, 1
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <Timer0__vSetCompareValue+0x14>
 2da:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Timer0_u8CompareValueOCB>
 2de:	68 bd       	out	0x28, r22	; 40
 2e0:	08 95       	ret

000002e2 <Timer0__vSetCompareValueInterrupt>:
 2e2:	80 ff       	sbrs	r24, 0
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <Timer0__vSetCompareValueInterrupt+0x12>
 2e6:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <Timer0_u8CompareValueOCA>
 2ea:	ee e6       	ldi	r30, 0x6E	; 110
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	90 81       	ld	r25, Z
 2f0:	92 60       	ori	r25, 0x02	; 2
 2f2:	90 83       	st	Z, r25
 2f4:	81 ff       	sbrs	r24, 1
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <Timer0__vSetCompareValueInterrupt+0x24>
 2f8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Timer0_u8CompareValueOCB>
 2fc:	ee e6       	ldi	r30, 0x6E	; 110
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	84 60       	ori	r24, 0x04	; 4
 304:	80 83       	st	Z, r24
 306:	08 95       	ret

00000308 <Timer0__vEnableInterrupt>:
 308:	87 70       	andi	r24, 0x07	; 7
 30a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 30e:	08 95       	ret

00000310 <Timer0__vClearInterrupt>:
 310:	95 b3       	in	r25, 0x15	; 21
 312:	87 70       	andi	r24, 0x07	; 7
 314:	80 95       	com	r24
 316:	98 23       	and	r25, r24
 318:	95 bb       	out	0x15, r25	; 21
 31a:	08 95       	ret

0000031c <Timer0__u16GetCounterOV>:
	
}
uint16_t Timer0__u16GetCounterOV(void)
{
	return (uint16_t)Timer0_u16CounterOV;
}
 31c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Timer0_u16CounterOV>
 320:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Timer0_u16CounterOV+0x1>
 324:	08 95       	ret

00000326 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
	Timer0_u16CounterOV++;
 334:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Timer0_u16CounterOV>
 338:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Timer0_u16CounterOV+0x1>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Timer0_u16CounterOV+0x1>
 342:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Timer0_u16CounterOV>
	
	LEDRED_OUT&=~LEDRED_PIN;
 346:	2d 98       	cbi	0x05, 5	; 5
	LEDAMBER_OUT&=~LEDAMBER_PIN;
 348:	45 98       	cbi	0x08, 5	; 8
	LEDGREEN_OUT&=~LEDGREEN_PIN;
 34a:	44 98       	cbi	0x08, 4	; 8
	
}
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	8f 93       	push	r24
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
	OCR0A=Timer0_u8CompareValueOCA;
 36a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Timer0_u8CompareValueOCA>
 36e:	87 bd       	out	0x27, r24	; 39
	TIMSK0&=~ ((uint8_t)Timer0_enInterruptOCIEA);
 370:	ee e6       	ldi	r30, 0x6E	; 110
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8d 7f       	andi	r24, 0xFD	; 253
 378:	80 83       	st	Z, r24
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	OCR0B=Timer0_u8CompareValueOCB;
 39a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Timer0_u8CompareValueOCB>
 39e:	88 bd       	out	0x28, r24	; 40
	TIMSK0&=~ ((uint8_t)Timer0_enInterruptOCIEB);
 3a0:	ee e6       	ldi	r30, 0x6E	; 110
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	8b 7f       	andi	r24, 0xFB	; 251
 3a8:	80 83       	st	Z, r24
	
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	8f 91       	pop	r24
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <__udivmodhi4>:
 3ba:	aa 1b       	sub	r26, r26
 3bc:	bb 1b       	sub	r27, r27
 3be:	51 e1       	ldi	r21, 0x11	; 17
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <__udivmodhi4_ep>

000003c2 <__udivmodhi4_loop>:
 3c2:	aa 1f       	adc	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	a6 17       	cp	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <__udivmodhi4_ep>
 3cc:	a6 1b       	sub	r26, r22
 3ce:	b7 0b       	sbc	r27, r23

000003d0 <__udivmodhi4_ep>:
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	5a 95       	dec	r21
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__udivmodhi4_loop>
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	bc 01       	movw	r22, r24
 3de:	cd 01       	movw	r24, r26
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
