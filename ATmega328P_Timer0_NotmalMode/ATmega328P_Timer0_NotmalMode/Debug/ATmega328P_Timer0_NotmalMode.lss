
ATmega328P_Timer0_NotmalMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f82  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b4  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041d  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_14>
  3c:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_15>
  40:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/interrupt.h>
#include <GPIO.h> /* Driver for GPIO*/
#include <Timer0.h> /* Driver for Timer0*/

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	/*Variable use to modified phase between OC0A and OC0B*/
	uint8_t u8Phase=0;
	uint16_t u16ValueOV=0;
	uint16_t u16ValuePreviousOV=0;
	volatile uint8_t u8CountInputPCINT2=0;
  b0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8CountInputINT0=0;
	/*Port Init PB5, PC4, PC5 as output and PD2, PB1 and PB1 as Input*/
	GPIO__vInitPort(); 
  b2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GPIO__vInitPort>
	/*Enable interrut in Input (PD2, BP1 and PB2)*/
	GPIO__vInitPortInterrupt();
  b6:	0e 94 0d 01 	call	0x21a	; 0x21a <GPIO__vInitPortInterrupt>
	
	/*Set Inmediate Compare value on  OC0A*/
	Timer0__vSetCompareValue(Timer0_enModuleA,0x0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 b5 01 	call	0x36a	; 0x36a <Timer0__vSetCompareValue>
	/*Set Inmediate Compare value on  OC0B*/
	Timer0__vSetCompareValue(Timer0_enModuleB,u8Phase);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 b5 01 	call	0x36a	; 0x36a <Timer0__vSetCompareValue>
	/* Set Mode for OC0A and OC0B as Toggle every Compare event*/
	Timer0__vSetOutputMode(Timer0_enModuleA|Timer0_enModuleB,Timer0_enCompareToggle);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 9a 01 	call	0x334	; 0x334 <Timer0__vSetOutputMode>
	/*Pin port initialization for Timer Peripheral*/
	Timer0__vInitPin(Timer0_enModuleA|Timer0_enModuleB);
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 91 01 	call	0x322	; 0x322 <Timer0__vInitPin>
	
	/*Clear pending Interrupt of Timer Overflow*/
	Timer0__vClearInterrupt(Timer0_enInterruptTOIE);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Timer0__vClearInterrupt>
	/*Enable Interrupt of Timer Overflow*/
	Timer0__vEnableInterrupt(Timer0_enInterruptTOIE);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Timer0__vEnableInterrupt>
	
	/*Intialization of Timer: Normal Mode and CLK div64 ~~ 1.024ms*/
	Timer0__vInit(Timer0_enModeNormal_MAX,Timer0_enClockDiv64,0);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Timer0__vInit>
	/*Enable Global Interrupt*/
	sei();
  ee:	78 94       	sei
int main(void)
{
	/*Variable use to modified phase between OC0A and OC0B*/
	uint8_t u8Phase=0;
	uint16_t u16ValueOV=0;
	uint16_t u16ValuePreviousOV=0;
  f0:	c1 2c       	mov	r12, r1
  f2:	d1 2c       	mov	r13, r1
#include <Timer0.h> /* Driver for Timer0*/

int main(void)
{
	/*Variable use to modified phase between OC0A and OC0B*/
	uint8_t u8Phase=0;
  f4:	91 2c       	mov	r9, r1
			if((u16ValueOV%(u8CountInputPCINT2+1))==0)
			{
				LEDRED_OUT^=LEDRED_PIN;
			}
			/*This task2 is executed approximately every 500ms */
			if((u16ValueOV%(uint16_t)500)==0)
  f6:	0f 2e       	mov	r0, r31
  f8:	f4 ef       	ldi	r31, 0xF4	; 244
  fa:	ef 2e       	mov	r14, r31
  fc:	ff 24       	eor	r15, r15
  fe:	f3 94       	inc	r15
 100:	f0 2d       	mov	r31, r0
			{
				LEDAMBER_OUT^=LEDAMBER_PIN;
				
			}
			/*This task3 is executed approximately every 100ms */
			if(((u16ValueOV)%(100))==0)
 102:	0f 2e       	mov	r0, r31
 104:	f4 e6       	ldi	r31, 0x64	; 100
 106:	af 2e       	mov	r10, r31
 108:	f0 2d       	mov	r31, r0
			{
				LEDGREEN_OUT^=LEDGREEN_PIN;
 10a:	68 94       	set
 10c:	88 24       	eor	r8, r8
 10e:	84 f8       	bld	r8, 4
				LEDRED_OUT^=LEDRED_PIN;
			}
			/*This task2 is executed approximately every 500ms */
			if((u16ValueOV%(uint16_t)500)==0)
			{
				LEDAMBER_OUT^=LEDAMBER_PIN;
 110:	68 94       	set
 112:	bb 24       	eor	r11, r11
 114:	b5 f8       	bld	r11, 5
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x74>
 118:	68 01       	movw	r12, r16
	/*Enable Global Interrupt*/
	sei();
    while (1) 
    {
		/*Temp variables for Shared Information*/
		u16ValueOV=(uint16_t)Timer0__u16GetCounterOV();
 11a:	0e 94 df 01 	call	0x3be	; 0x3be <Timer0__u16GetCounterOV>
 11e:	8c 01       	movw	r16, r24
		u8CountInputPCINT2=GPIO__u8GetCounterRisingPCINT2();
 120:	0e 94 18 01 	call	0x230	; 0x230 <GPIO__u8GetCounterRisingPCINT2>
 124:	89 83       	std	Y+1, r24	; 0x01
		u8CountInputINT0=GPIO__u8GetCounterRisingINT0();
 126:	0e 94 1e 01 	call	0x23c	; 0x23c <GPIO__u8GetCounterRisingINT0>
 12a:	48 2f       	mov	r20, r24
		
		/*Wait until another interrupt occur in timer*/
		if(u16ValueOV!=u16ValuePreviousOV)
 12c:	c0 16       	cp	r12, r16
 12e:	d1 06       	cpc	r13, r17
 130:	99 f3       	breq	.-26     	; 0x118 <main+0x72>
		{
			
			/*This task1 is executed approximately every 1ms*u8CountInputPCINT2 */
			if((u16ValueOV%(u8CountInputPCINT2+1))==0)
 132:	69 81       	ldd	r22, Y+1	; 0x01
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	6f 5f       	subi	r22, 0xFF	; 255
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	c8 01       	movw	r24, r16
 13c:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 140:	89 2b       	or	r24, r25
 142:	19 f4       	brne	.+6      	; 0x14a <main+0xa4>
			{
				LEDRED_OUT^=LEDRED_PIN;
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8b 25       	eor	r24, r11
 148:	85 b9       	out	0x05, r24	; 5
			}
			/*This task2 is executed approximately every 500ms */
			if((u16ValueOV%(uint16_t)500)==0)
 14a:	98 01       	movw	r18, r16
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
 150:	36 95       	lsr	r19
 152:	27 95       	ror	r18
 154:	a5 ec       	ldi	r26, 0xC5	; 197
 156:	b0 e2       	ldi	r27, 0x20	; 32
 158:	0e 94 3f 02 	call	0x47e	; 0x47e <__umulhisi3>
 15c:	92 95       	swap	r25
 15e:	82 95       	swap	r24
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	89 27       	eor	r24, r25
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	89 27       	eor	r24, r25
 168:	8e 9d       	mul	r24, r14
 16a:	90 01       	movw	r18, r0
 16c:	8f 9d       	mul	r24, r15
 16e:	30 0d       	add	r19, r0
 170:	9e 9d       	mul	r25, r14
 172:	30 0d       	add	r19, r0
 174:	11 24       	eor	r1, r1
 176:	02 17       	cp	r16, r18
 178:	13 07       	cpc	r17, r19
 17a:	19 f4       	brne	.+6      	; 0x182 <main+0xdc>
			{
				LEDAMBER_OUT^=LEDAMBER_PIN;
 17c:	88 b1       	in	r24, 0x08	; 8
 17e:	8b 25       	eor	r24, r11
 180:	88 b9       	out	0x08, r24	; 8
				
			}
			/*This task3 is executed approximately every 100ms */
			if(((u16ValueOV)%(100))==0)
 182:	98 01       	movw	r18, r16
 184:	36 95       	lsr	r19
 186:	27 95       	ror	r18
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	ab e7       	ldi	r26, 0x7B	; 123
 18e:	b4 e1       	ldi	r27, 0x14	; 20
 190:	0e 94 3f 02 	call	0x47e	; 0x47e <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	a8 9e       	mul	r10, r24
 19a:	90 01       	movw	r18, r0
 19c:	a9 9e       	mul	r10, r25
 19e:	30 0d       	add	r19, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	02 17       	cp	r16, r18
 1a4:	13 07       	cpc	r17, r19
 1a6:	19 f4       	brne	.+6      	; 0x1ae <main+0x108>
			{
				LEDGREEN_OUT^=LEDGREEN_PIN;
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	88 25       	eor	r24, r8
 1ac:	88 b9       	out	0x08, r24	; 8
			}			
			/*This task4 is executed approximately every 10ms */
			if(((u16ValueOV)%(10))==0)
 1ae:	98 01       	movw	r18, r16
 1b0:	ad ec       	ldi	r26, 0xCD	; 205
 1b2:	bc ec       	ldi	r27, 0xCC	; 204
 1b4:	0e 94 3f 02 	call	0x47e	; 0x47e <__umulhisi3>
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	9c 01       	movw	r18, r24
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	08 17       	cp	r16, r24
 1dc:	19 07       	cpc	r17, r25
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0x13c>
 1e0:	9b cf       	rjmp	.-202    	; 0x118 <main+0x72>
			{
				/*Task to change pahse of OC0B*/
				if(u8CountInputINT0>0)
 1e2:	44 23       	and	r20, r20
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <main+0x142>
 1e6:	98 cf       	rjmp	.-208    	; 0x118 <main+0x72>
				{
					u8Phase+=4;
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	98 0e       	add	r9, r24
					GPIO__vClearCounterRisingINT0();
 1ec:	0e 94 1b 01 	call	0x236	; 0x236 <GPIO__vClearCounterRisingINT0>
					Timer0__vSetCompareValueInterrupt(Timer0_enModuleB,u8Phase);
 1f0:	69 2d       	mov	r22, r9
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 c0 01 	call	0x380	; 0x380 <Timer0__vSetCompareValueInterrupt>
 1f8:	8f cf       	rjmp	.-226    	; 0x118 <main+0x72>

000001fa <GPIO__vInitPort>:
	
}

void GPIO__vSetCounterRisingINT0(uint8_t u8Value)
{
	GPIO_u8CountINT0=u8Value;
 1fa:	85 b7       	in	r24, 0x35	; 53
 1fc:	8f 7e       	andi	r24, 0xEF	; 239
 1fe:	85 bf       	out	0x35, r24	; 53
 200:	52 98       	cbi	0x0a, 2	; 10
 202:	5a 9a       	sbi	0x0b, 2	; 11
 204:	22 98       	cbi	0x04, 2	; 4
 206:	2a 9a       	sbi	0x05, 2	; 5
 208:	21 98       	cbi	0x04, 1	; 4
 20a:	29 9a       	sbi	0x05, 1	; 5
 20c:	25 9a       	sbi	0x04, 5	; 4
 20e:	3c 9a       	sbi	0x07, 4	; 7
 210:	3d 9a       	sbi	0x07, 5	; 7
 212:	2d 98       	cbi	0x05, 5	; 5
 214:	44 98       	cbi	0x08, 4	; 8
 216:	45 98       	cbi	0x08, 5	; 8
 218:	08 95       	ret

0000021a <GPIO__vInitPortInterrupt>:
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	8d bb       	out	0x1d, r24	; 29
 224:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 22e:	08 95       	ret

00000230 <GPIO__u8GetCounterRisingPCINT2>:
 230:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <GPIO_u8CountPCINT2>
 234:	08 95       	ret

00000236 <GPIO__vClearCounterRisingINT0>:
 236:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 23a:	08 95       	ret

0000023c <GPIO__u8GetCounterRisingINT0>:
	
}
uint8_t GPIO__u8GetCounterRisingINT0(void)
{
	return GPIO_u8CountINT0;
 23c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
	
}
 240:	08 95       	ret

00000242 <__vector_1>:

/*Interrupt for INT0 PD2*/
ISR(INT0_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
	GPIO_u8CountINT0++;
 24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_3>:

ISR(PCINT0_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
	static uint8_t u8PreviousValuePB1=(1<<PINB1);
	static uint8_t u8PreviousValuePB2=(1<<PINB2);
	
	uint8_t u8ActualValuePB1=(PINB & (1<<PINB1));
 274:	93 b1       	in	r25, 0x03	; 3
 276:	92 70       	andi	r25, 0x02	; 2
	uint8_t u8ActualValuePB2=(PINB & (1<<PINB2));
 278:	83 b1       	in	r24, 0x03	; 3
 27a:	84 70       	andi	r24, 0x04	; 4
	if(u8ActualValuePB1 != u8PreviousValuePB1 )
 27c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <u8PreviousValuePB1.1665>
 280:	92 17       	cp	r25, r18
 282:	21 f0       	breq	.+8      	; 0x28c <__vector_3+0x28>
	{
		if( u8ActualValuePB1==0)/*Pin change from 5v to 0v Falling edge*/
 284:	91 11       	cpse	r25, r1
 286:	02 c0       	rjmp	.+4      	; 0x28c <__vector_3+0x28>
		{
			GPIO_u8CountPCINT2=0;
 288:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{
		}
	}
	if(u8ActualValuePB2 != u8PreviousValuePB2 )
 28c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 290:	82 17       	cp	r24, r18
 292:	39 f0       	breq	.+14     	; 0x2a2 <__vector_3+0x3e>
	{
		if( u8ActualValuePB2==0)/*Pin change from 5v to 0v Falling edge*/
 294:	81 11       	cpse	r24, r1
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <__vector_3+0x3e>
		{
			GPIO_u8CountPCINT2++;
 298:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <GPIO_u8CountPCINT2>
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <GPIO_u8CountPCINT2>
		}
		else/*Pin change from 0v to 5v Rising edge*/
		{	
		}
	}
	u8PreviousValuePB1=u8ActualValuePB1;
 2a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <u8PreviousValuePB1.1665>
	u8PreviousValuePB2=u8ActualValuePB2;
 2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <Timer0__vInit>:
{
	TIMSK0|=((uint8_t)enInterrupt&0x07);
}
void Timer0__vClearCounterOV(void)
{
	Timer0_u16CounterOV=0;
 2ba:	94 b5       	in	r25, 0x24	; 36
 2bc:	9c 7f       	andi	r25, 0xFC	; 252
 2be:	94 bd       	out	0x24, r25	; 36
 2c0:	95 b5       	in	r25, 0x25	; 37
 2c2:	97 7f       	andi	r25, 0xF7	; 247
 2c4:	95 bd       	out	0x25, r25	; 37
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	a1 f0       	breq	.+40     	; 0x2f2 <Timer0__vInit+0x38>
 2ca:	28 f4       	brcc	.+10     	; 0x2d6 <Timer0__vInit+0x1c>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <Timer0__vInit+0x26>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	51 f0       	breq	.+20     	; 0x2e8 <Timer0__vInit+0x2e>
 2d4:	20 c0       	rjmp	.+64     	; 0x316 <Timer0__vInit+0x5c>
 2d6:	85 30       	cpi	r24, 0x05	; 5
 2d8:	81 f0       	breq	.+32     	; 0x2fa <Timer0__vInit+0x40>
 2da:	87 30       	cpi	r24, 0x07	; 7
 2dc:	a9 f0       	breq	.+42     	; 0x308 <Timer0__vInit+0x4e>
 2de:	1b c0       	rjmp	.+54     	; 0x316 <Timer0__vInit+0x5c>
 2e0:	84 b5       	in	r24, 0x24	; 36
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	84 bd       	out	0x24, r24	; 36
 2e6:	17 c0       	rjmp	.+46     	; 0x316 <Timer0__vInit+0x5c>
 2e8:	84 b5       	in	r24, 0x24	; 36
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	84 bd       	out	0x24, r24	; 36
 2ee:	47 bd       	out	0x27, r20	; 39
 2f0:	12 c0       	rjmp	.+36     	; 0x316 <Timer0__vInit+0x5c>
 2f2:	84 b5       	in	r24, 0x24	; 36
 2f4:	83 60       	ori	r24, 0x03	; 3
 2f6:	84 bd       	out	0x24, r24	; 36
 2f8:	0e c0       	rjmp	.+28     	; 0x316 <Timer0__vInit+0x5c>
 2fa:	84 b5       	in	r24, 0x24	; 36
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	84 bd       	out	0x24, r24	; 36
 300:	85 b5       	in	r24, 0x25	; 37
 302:	88 60       	ori	r24, 0x08	; 8
 304:	85 bd       	out	0x25, r24	; 37
 306:	47 bd       	out	0x27, r20	; 39
 308:	84 b5       	in	r24, 0x24	; 36
 30a:	83 60       	ori	r24, 0x03	; 3
 30c:	84 bd       	out	0x24, r24	; 36
 30e:	85 b5       	in	r24, 0x25	; 37
 310:	88 60       	ori	r24, 0x08	; 8
 312:	85 bd       	out	0x25, r24	; 37
 314:	47 bd       	out	0x27, r20	; 39
 316:	16 bc       	out	0x26, r1	; 38
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	67 70       	andi	r22, 0x07	; 7
 31c:	68 2b       	or	r22, r24
 31e:	65 bd       	out	0x25, r22	; 37
 320:	08 95       	ret

00000322 <Timer0__vInitPin>:
 322:	80 ff       	sbrs	r24, 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <Timer0__vInitPin+0x8>
 326:	56 9a       	sbi	0x0a, 6	; 10
 328:	5e 98       	cbi	0x0b, 6	; 11
 32a:	81 ff       	sbrs	r24, 1
 32c:	02 c0       	rjmp	.+4      	; 0x332 <Timer0__vInitPin+0x10>
 32e:	55 9a       	sbi	0x0a, 5	; 10
 330:	5d 98       	cbi	0x0b, 5	; 11
 332:	08 95       	ret

00000334 <Timer0__vSetOutputMode>:
 334:	80 ff       	sbrs	r24, 0
 336:	0a c0       	rjmp	.+20     	; 0x34c <Timer0__vSetOutputMode+0x18>
 338:	94 b5       	in	r25, 0x24	; 36
 33a:	9f 73       	andi	r25, 0x3F	; 63
 33c:	94 bd       	out	0x24, r25	; 36
 33e:	94 b5       	in	r25, 0x24	; 36
 340:	40 e4       	ldi	r20, 0x40	; 64
 342:	64 9f       	mul	r22, r20
 344:	90 01       	movw	r18, r0
 346:	11 24       	eor	r1, r1
 348:	29 2b       	or	r18, r25
 34a:	24 bd       	out	0x24, r18	; 36
 34c:	81 ff       	sbrs	r24, 1
 34e:	0c c0       	rjmp	.+24     	; 0x368 <Timer0__vSetOutputMode+0x34>
 350:	84 b5       	in	r24, 0x24	; 36
 352:	8f 7c       	andi	r24, 0xCF	; 207
 354:	84 bd       	out	0x24, r24	; 36
 356:	94 b5       	in	r25, 0x24	; 36
 358:	86 2f       	mov	r24, r22
 35a:	83 70       	andi	r24, 0x03	; 3
 35c:	20 e1       	ldi	r18, 0x10	; 16
 35e:	82 9f       	mul	r24, r18
 360:	b0 01       	movw	r22, r0
 362:	11 24       	eor	r1, r1
 364:	69 2b       	or	r22, r25
 366:	64 bd       	out	0x24, r22	; 36
 368:	08 95       	ret

0000036a <Timer0__vSetCompareValue>:
 36a:	80 ff       	sbrs	r24, 0
 36c:	03 c0       	rjmp	.+6      	; 0x374 <Timer0__vSetCompareValue+0xa>
 36e:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <Timer0_u8CompareValueOCA>
 372:	67 bd       	out	0x27, r22	; 39
 374:	81 ff       	sbrs	r24, 1
 376:	03 c0       	rjmp	.+6      	; 0x37e <Timer0__vSetCompareValue+0x14>
 378:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Timer0_u8CompareValueOCB>
 37c:	68 bd       	out	0x28, r22	; 40
 37e:	08 95       	ret

00000380 <Timer0__vSetCompareValueInterrupt>:
 380:	80 ff       	sbrs	r24, 0
 382:	07 c0       	rjmp	.+14     	; 0x392 <Timer0__vSetCompareValueInterrupt+0x12>
 384:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <Timer0_u8CompareValueOCA>
 388:	ee e6       	ldi	r30, 0x6E	; 110
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	90 81       	ld	r25, Z
 38e:	92 60       	ori	r25, 0x02	; 2
 390:	90 83       	st	Z, r25
 392:	81 ff       	sbrs	r24, 1
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <Timer0__vSetCompareValueInterrupt+0x24>
 396:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Timer0_u8CompareValueOCB>
 39a:	ee e6       	ldi	r30, 0x6E	; 110
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	80 83       	st	Z, r24
 3a4:	08 95       	ret

000003a6 <Timer0__vEnableInterrupt>:
 3a6:	87 70       	andi	r24, 0x07	; 7
 3a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 3ac:	08 95       	ret

000003ae <Timer0__vClearInterrupt>:
 3ae:	ee e6       	ldi	r30, 0x6E	; 110
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	90 81       	ld	r25, Z
 3b4:	87 70       	andi	r24, 0x07	; 7
 3b6:	80 95       	com	r24
 3b8:	98 23       	and	r25, r24
 3ba:	90 83       	st	Z, r25
 3bc:	08 95       	ret

000003be <Timer0__u16GetCounterOV>:
	
}
uint16_t Timer0__u16GetCounterOV(void)
{
	return (uint16_t)Timer0_u16CounterOV;
}
 3be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Timer0_u16CounterOV>
 3c2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Timer0_u16CounterOV+0x1>
 3c6:	08 95       	ret

000003c8 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
	Timer0_u16CounterOV++;
 3d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Timer0_u16CounterOV>
 3da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Timer0_u16CounterOV+0x1>
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Timer0_u16CounterOV+0x1>
 3e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Timer0_u16CounterOV>
	
	/*LEDRED_OUT&=~LEDRED_PIN;
	LEDAMBER_OUT&=~LEDAMBER_PIN;
	LEDGREEN_OUT&=~LEDGREEN_PIN;
	*/
}
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
	OCR0A=Timer0_u8CompareValueOCA;
 406:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Timer0_u8CompareValueOCA>
 40a:	87 bd       	out	0x27, r24	; 39
	TIMSK0&=~ ((uint8_t)Timer0_enInterruptOCIEA);
 40c:	ee e6       	ldi	r30, 0x6E	; 110
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	8d 7f       	andi	r24, 0xFD	; 253
 414:	80 83       	st	Z, r24
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	8f 91       	pop	r24
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	8f 93       	push	r24
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	OCR0B=Timer0_u8CompareValueOCB;
 436:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Timer0_u8CompareValueOCB>
 43a:	88 bd       	out	0x28, r24	; 40
	TIMSK0&=~ ((uint8_t)Timer0_enInterruptOCIEA);
 43c:	ee e6       	ldi	r30, 0x6E	; 110
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	8d 7f       	andi	r24, 0xFD	; 253
 444:	80 83       	st	Z, r24
	
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	8f 91       	pop	r24
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__udivmodhi4>:
 456:	aa 1b       	sub	r26, r26
 458:	bb 1b       	sub	r27, r27
 45a:	51 e1       	ldi	r21, 0x11	; 17
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__udivmodhi4_ep>

0000045e <__udivmodhi4_loop>:
 45e:	aa 1f       	adc	r26, r26
 460:	bb 1f       	adc	r27, r27
 462:	a6 17       	cp	r26, r22
 464:	b7 07       	cpc	r27, r23
 466:	10 f0       	brcs	.+4      	; 0x46c <__udivmodhi4_ep>
 468:	a6 1b       	sub	r26, r22
 46a:	b7 0b       	sbc	r27, r23

0000046c <__udivmodhi4_ep>:
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	5a 95       	dec	r21
 472:	a9 f7       	brne	.-22     	; 0x45e <__udivmodhi4_loop>
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	bc 01       	movw	r22, r24
 47a:	cd 01       	movw	r24, r26
 47c:	08 95       	ret

0000047e <__umulhisi3>:
 47e:	a2 9f       	mul	r26, r18
 480:	b0 01       	movw	r22, r0
 482:	b3 9f       	mul	r27, r19
 484:	c0 01       	movw	r24, r0
 486:	a3 9f       	mul	r26, r19
 488:	70 0d       	add	r23, r0
 48a:	81 1d       	adc	r24, r1
 48c:	11 24       	eor	r1, r1
 48e:	91 1d       	adc	r25, r1
 490:	b2 9f       	mul	r27, r18
 492:	70 0d       	add	r23, r0
 494:	81 1d       	adc	r24, r1
 496:	11 24       	eor	r1, r1
 498:	91 1d       	adc	r25, r1
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
