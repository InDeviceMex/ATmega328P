
ATmega328P_ExternalInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000174  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000757  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067a  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ff  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c9  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  9e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vInitPort>:



void vInitPort(void)
{
	MCUCR&=~(1<<PUD);    /*Enable global Pull-Up*/
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	85 bf       	out	0x35, r24	; 53
	PBUTTON1_DIR   &=~PBUTTON1_READPIN;   /*PD.2 (Push Button1) as Input*/
  ac:	52 98       	cbi	0x0a, 2	; 10
	PBUTTON1_PULLUP|= PBUTTON1_READPIN;   /*PD.2 (Push Button1) with Pull-Up*/
  ae:	5a 9a       	sbi	0x0b, 2	; 11
	
	PBUTTON2_DIR   &=~PBUTTON2_READPIN;   /*PB.2 (Push Button2) as Input*/
  b0:	22 98       	cbi	0x04, 2	; 4
	PBUTTON2_PULLUP|= PBUTTON2_READPIN;   /*PB.2 (Push Button2) with Pull-Up*/
  b2:	2a 9a       	sbi	0x05, 2	; 5
	
	PBUTTON3_DIR   &=~PBUTTON3_READPIN;   /*PB.1 (Push Button2) as Input*/
  b4:	21 98       	cbi	0x04, 1	; 4
	PBUTTON3_PULLUP|= PBUTTON3_READPIN;   /*PB.1 (Push Button2) with Pull-Up*/
  b6:	29 9a       	sbi	0x05, 1	; 5
	
	LEDRED_DIR   |= LEDRED_PIN;		/*PB.5 (Led RED) as Output*/
  b8:	25 9a       	sbi	0x04, 5	; 4
	LEDGREEN_DIR |= LEDGREEN_PIN;		/*PC.5 (Led GREEN) as Output*/
  ba:	3c 9a       	sbi	0x07, 4	; 7
	LEDAMBER_DIR |= LEDAMBER_PIN;		/*PC.4 (Led AMBER) as Output*/
  bc:	3d 9a       	sbi	0x07, 5	; 7
	
	LEDRED_OUT  &=~LEDRED_PIN;		/*PC.5 (Led RED) Output Low*/
  be:	2d 98       	cbi	0x05, 5	; 5
	LEDGREEN_OUT&=~LEDGREEN_PIN;		/*PC.5 (Led GREEN) Output Low*/
  c0:	44 98       	cbi	0x08, 4	; 8
	LEDAMBER_OUT&=~LEDAMBER_PIN;		/*PC.4 (Led AMBER) Output Low*/
  c2:	45 98       	cbi	0x08, 5	; 8
  c4:	08 95       	ret

000000c6 <vInitPortInterrupt>:
	*   0       1     Any logical change on INT1 generates an interrupt request
	*   1       0     The falling edge of INT1 generates an interrupt request
	*   1       1     The rising edge of INT1 generates an interrupt request.
	*	Same For INT0 (ISC01, ISC00)
	*/
	EICRA=(1<<ISC00); /* Any logical change on INT1 generates an interrupt request*/
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	*  EIMSK = External Interrupt Mask Register
	*  Register used for enable EXT Interrupts
	*  INT0: enable EINT0
	*  INT1: enable EINT1
	*/	
	EIMSK=(1<<INT0);/*Enable EINT0 (PD.2)*/ 
  cc:	8d bb       	out	0x1d, r24	; 29
	*  Register used to enable Pin change Interrupts
	*  PCIE0: Enable PCINT0
	*  PCIE1: Enable PCINT1
	*  PCIE2: Enable PCINT2
	*/	
	PCICR=(1<<PCIE0); /*Enable PCINT0 because program use PB2 and PB1 (PCINT[1,2])*/
  ce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	* PCMSK2: Enable PCINT[16-23]
	* PCMSK1: Enable PCINT[8-15]
	* PCMSK0: Enable PCINT[0-7]
	*
	*/
	PCMSK0= (1<<PCINT2)|(1<<PCINT1); /*Enable PCINT[1,2]*/
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
  d8:	08 95       	ret

000000da <main>:

volatile uint8_t main_u8Count=0;
int main(void)
{
    /* Replace with your application code */
	vInitPort();
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <vInitPort>
	vInitPortInterrupt();
  de:	0e 94 63 00 	call	0xc6	; 0xc6 <vInitPortInterrupt>
	sei();
  e2:	78 94       	sei
    while (1) 
    {
		if(main_u8Count>(uint8_t)10)
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e8:	8b 30       	cpi	r24, 0x0B	; 11
  ea:	e0 f3       	brcs	.-8      	; 0xe4 <main+0xa>
		{
			LEDRED_OUT|=LEDRED_PIN;
  ec:	2d 9a       	sbi	0x05, 5	; 5
			main_u8Count=0;
  ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  f2:	f8 cf       	rjmp	.-16     	; 0xe4 <main+0xa>

000000f4 <__vector_1>:
	
}

/*Interrupt for INT0 PD2*/
ISR(INT0_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
	uint8_t u8IntValue=PIND& (1<<PIND2);
	if(u8IntValue==0) /*Pin change from 5v to 0v Falling edge*/
  fe:	4a 99       	sbic	0x09, 2	; 9
 100:	02 c0       	rjmp	.+4      	; 0x106 <__vector_1+0x12>
	{
		LEDRED_OUT|=LEDRED_PIN;
 102:	2d 9a       	sbi	0x05, 5	; 5
 104:	01 c0       	rjmp	.+2      	; 0x108 <__vector_1+0x14>
	}
	else/*Pin change from 0v to 5v Rising edge*/
	{
		LEDRED_OUT&=~LEDRED_PIN;
 106:	2d 98       	cbi	0x05, 5	; 5
	}
}
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_3>:

ISR(PCINT0_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	static uint8_t u8PreviousValuePB1=(1<<PINB1);
	static uint8_t u8PreviousValuePB2=(1<<PINB2);
	
	uint8_t u8ActualValuePB1=(PINB & (1<<PINB1));
 122:	93 b1       	in	r25, 0x03	; 3
 124:	92 70       	andi	r25, 0x02	; 2
	uint8_t u8ActualValuePB2=(PINB & (1<<PINB2));
 126:	83 b1       	in	r24, 0x03	; 3
 128:	84 70       	andi	r24, 0x04	; 4
	if(u8ActualValuePB1 != u8PreviousValuePB1 )
 12a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <u8PreviousValuePB1.1639>
 12e:	92 17       	cp	r25, r18
 130:	29 f0       	breq	.+10     	; 0x13c <__vector_3+0x2a>
	{
		if( u8ActualValuePB1==0)/*Pin change from 5v to 0v Falling edge*/
 132:	91 11       	cpse	r25, r1
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_3+0x28>
		{
			LEDAMBER_OUT|=LEDAMBER_PIN;
 136:	45 9a       	sbi	0x08, 5	; 8
 138:	01 c0       	rjmp	.+2      	; 0x13c <__vector_3+0x2a>
			
		}
		else/*Pin change from 0v to 5v Falling edge*/
		{
			LEDAMBER_OUT&=~LEDAMBER_PIN;
 13a:	45 98       	cbi	0x08, 5	; 8
		}
	}
	if(u8ActualValuePB2 != u8PreviousValuePB2 )
 13c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 140:	82 17       	cp	r24, r18
 142:	51 f0       	breq	.+20     	; 0x158 <__vector_3+0x46>
	{
		if( u8ActualValuePB2==0)/*Pin change from 5v to 0v Falling edge*/
 144:	81 11       	cpse	r24, r1
 146:	02 c0       	rjmp	.+4      	; 0x14c <__vector_3+0x3a>
		{
			LEDGREEN_OUT|=LEDGREEN_PIN;
 148:	44 9a       	sbi	0x08, 4	; 8
 14a:	06 c0       	rjmp	.+12     	; 0x158 <__vector_3+0x46>
				
		}
		else/*Pin change from 0v to 5v Falling edge*/
		{
			LEDGREEN_OUT&=~LEDGREEN_PIN;
 14c:	44 98       	cbi	0x08, 4	; 8
			main_u8Count++;
 14e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
		}
	}
	u8PreviousValuePB1=u8ActualValuePB1;
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <u8PreviousValuePB1.1639>
	u8PreviousValuePB2=u8ActualValuePB2;
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
